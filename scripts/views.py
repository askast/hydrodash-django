from django.http import HttpResponse
import numpy as np
from numpy.polynomial import polynomial as P
import pandas as pd
import json
from datetime import datetime, timedelta
from io import BytesIO
import base64
import random
import string
import math 
from iapws import IAPWS95

import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib import lines
from matplotlib.cbook import get_sample_data
import matplotlib.tri as tri

from django.http import JsonResponse
from django.contrib.staticfiles.storage import staticfiles_storage
from django.conf import settings
from django.core.files import File
from django.db.models import F
from django.core.exceptions import ObjectDoesNotExist
from marketingdata.models import MarketingCurveDetail, MarketingCurveData
from pump.models import Pump, PumpTrim, NPSHData
from testdata.models import ReducedPumpTestDetails, ReducedPumpTestData, RawTestsList
from pei.utils import calculatePEI, evaluatePEIrule
from pump.models import OldTestDetails



mpl.rcParams["font.size"] = 12


def randomString(stringLength=10):
    """Generate a random string of fixed length """
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))


def getCoeffs(request):
    pump_str = [
        # ["KV", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KV", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KV", "2006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KV", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KV", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KV", "3006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KV", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["KV", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KV", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KV", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KV", "4009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KV", "4011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KV", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KV", "6007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KV", "6009", "D", [1160, 1450, 1760], [7.0, 7.75, 8.5, 9.0, 9.5]],
        # ["KV", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "6013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KV", "8011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "8013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KS", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KS", "2006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KS", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KS", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KS", "3006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KS", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["KS", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KS", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KS", "4009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KS", "4011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KS", "6007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KS", "6009", "D", [1160, 1450, 1760], [7.0, 7.75, 8.5, 9.0, 9.5]],
        # ["KS", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "6013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "8011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "8013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "1206", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["FI", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["FI", "2506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["FI", "1207", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "2507", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["FI", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        ["FI", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["FI", "1509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["FI", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["FI", "2509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["FI", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["FI", "4009", "D", [1160, 1450, 1760], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["FI", "5009", "D", [1160, 1450, 1760], [7.0, 7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["FI", "6009", "D", [1160, 1450, 1760], [7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["FI", "2511", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "5011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "2513", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "5013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "6013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "8013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "1206", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["CI", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["CI", "2506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["CI", "1207", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "2507", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["CI", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        ["CI", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["CI", "1509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["CI", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["CI", "2509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["CI", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["CI", "4009", "D", [1160, 1450, 1760], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["CI", "5009", "D", [1160, 1450, 1760], [7.0, 7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["CI", "6009", "D", [1160, 1450, 1760], [7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["CI", "2511", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "5011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "2513", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
    ]

    return_string = "Pump, Speed, Diameter, Flow, Head, Flow, Eta, NPSH Flow, NPSH"
    return_list = []

    for series, model, d, speeds, trims in pump_str:
        for speed in speeds:
            return_object = {
                "Model": f"{series}{model}{d}",
                "Speed": speed,
                "#NPSH": 1,
                "#Trims": len(trims),
            }

            print(f"Looking up :\n {series}{model}{d} {speed}rpm")
            pumpobj = Pump.objects.get(
                series=series, pump_model=model, design_iteration=d, speed=speed
            )

            npsh_data = NPSHData.objects.filter(pump=pumpobj).values("flow", "npsh")
            npsh_data = np.array(
                [
                    [point["flow"] * 4.402862, point["npsh"] * 3.28084]
                    for point in npsh_data
                ]
            )
            npsh_data = npsh_data[np.argsort(npsh_data[:, 0])]
            return_object["NPSHMinFlow"] = [np.amin(npsh_data.T[0]).item(), 0]
            return_object["NPSHMaxFlow"] = [np.amax(npsh_data.T[0]).item(), 0]
            npsh_coeffs = list(np.polyfit(npsh_data.T[0], npsh_data.T[1], 3))
            npsh_poly = np.poly1d(np.polyfit(npsh_data.T[0], npsh_data.T[1], 3))
            npsh_coeffs.insert(0, 0)
            npsh_coeffs.insert(0, 0)
            
            sample_npsh_flows = np.linspace(np.amin(npsh_data.T[0]).item(), np.amax(npsh_data.T[0]).item(), 30)
            sample_npsh = npsh_poly(sample_npsh_flows)

            return_object["NPSH-coeffs"] = npsh_coeffs
            head_coeffs_list = []
            eff_coeffs_list = []
            min_flows_list = []
            max_flows_list = []
            sample_flows_list = []
            sample_heads_list = []
            sample_effs_list = []
            max_trim = max(trims)

            # get max flow of max trim
            pump_max_trim_obj = PumpTrim.objects.get(
                pump__series=series,
                pump__pump_model=model,
                pump__design_iteration=d,
                pump__speed=speed,
                trim=max_trim,
            )
            head_poly_max = np.poly1d(
                getattr(pump_max_trim_obj.marketing_data, "headcoeffs")
            )
            # eff_poly_max = np.poly1d(getattr(pump_max_trim_obj.marketing_data, "effcoeffs"))
            flows_max = list(
                MarketingCurveData.objects.filter(
                    curveid=pump_max_trim_obj.marketing_data
                )
                .order_by("flow")
                .values_list("flow", flat=True)
            )
            max_flow = flows_max[-1] * 4.402862

            # establish quadratic of max flows
            a_max = head_poly_max(max_flow).item() / math.pow(max_flow, 2)
            

            for trim in trims:
                print(f'Looking up :\n {trim}" trim')
                pump_trim_obj = PumpTrim.objects.get(
                    pump__series=series,
                    pump__pump_model=model,
                    pump__design_iteration=d,
                    pump__speed=speed,
                    trim=trim,
                )
                head_poly = np.poly1d(
                    getattr(pump_trim_obj.marketing_data, "headcoeffs")
                )
                eff_poly = np.poly1d(getattr(pump_trim_obj.marketing_data, "effcoeffs"))
                flows = list(
                    MarketingCurveData.objects.filter(
                        curveid=pump_trim_obj.marketing_data
                    )
                    .order_by("flow")
                    .values_list("flow", flat=True)
                )

                # determine max flow as intersection of quadratic and head_poly
                if trim != max_trim:
                    temp_flows = np.linspace(0, (max_flow + 5), 100)
                    curve_heads = head_poly(temp_flows)
                    temp_heads = np.power(temp_flows, 2) * a_max
                    # print(f"curve:{curve_heads}\ntemp:{temp_heads}")
                    intercept_flowheads_max = interpolated_intercept(temp_flows, temp_heads, curve_heads)
                    trim_max_flow = intercept_flowheads_max[0]
                else:
                    trim_max_flow = max_flow

                sample_flows = np.linspace(0, trim_max_flow, 30)
                sample_heads = head_poly(sample_flows)
                sample_effs = eff_poly(sample_flows) * 100
                # sample_flows_list.append(sample_flows)
                # sample_heads_list.append(sample_heads)
                # sample_effs_list.append(sample_effs)
                # for sflow, shead, seff, snflow, snpsh in zip(sample_flows, sample_heads, sample_effs, sample_npsh_flows, sample_npsh):
                #     if trim == max_trim:
                #         return_string += f"\n{series}{model}{d}, {speed}, {trim}, {sflow}, {shead}, {sflow}, {seff}, {snflow}, {snpsh}"
                #     else:
                #         return_string += f"\n{series}{model}{d}, {speed}, {trim}, {sflow}, {shead}, {sflow}, {seff}, , "
                head_coeffs = np.polyfit(sample_flows, sample_heads, 5).tolist()
                eff_coeffs = np.polyfit(sample_flows, sample_effs, 5).tolist()

                head_coeffs_list.append(head_coeffs)
                eff_coeffs_list.append(eff_coeffs)
                bep_flow = getattr(pump_trim_obj.marketing_data, "bep_flow")
                min_flows_list.append(0.3 * bep_flow * 4.402862)
                max_flows_list.append(trim_max_flow)

            return_object["TrimMinFlows"] = min_flows_list
            return_object["TrimDia"] = trims
            return_object["TrimMaxFlows"] = max_flows_list
            return_object["Head-Coeff"] = head_coeffs_list
            return_object["Eff-Coeff"] = eff_coeffs_list
            return_list.append(return_object)

            

    return_string = json.dumps(return_list)
        
     
    # response = HttpResponse(return_string, content_type='text/plain')
    # response['Content-Disposition'] = 'attachment; filename={0}'.format("Intelliquip_export.csv")
    # return response

    return HttpResponse(return_string, content_type="text/plain")


def getVarSpeedCoeffs(request):
    pump_list = [
        # ["KV", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KV", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KV", "2006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KV", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KV", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KV", "3006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KV", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["KV", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KV", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KV", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KV", "4009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KV", "4011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KV", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KV", "6007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KV", "6009", "D", [1160, 1450, 1760], [7.0, 7.75, 8.5, 9.0, 9.5]],
        # ["KV", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "6013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KV", "8011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "8013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KS", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KS", "2006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KS", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KS", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KS", "3006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KS", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["KS", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KS", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KS", "4009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KS", "4011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KS", "6007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KS", "6009", "D", [1160, 1450, 1760], [7.0, 7.75, 8.5, 9.0, 9.5]],
        # ["KS", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "6013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "8011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "8013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "1206", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["FI", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["FI", "2506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["FI", "1207", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "2507", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["FI", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["FI", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["FI", "1509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["FI", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["FI", "2509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["FI", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["FI", "4009", "D", [1160, 1450, 1760], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["FI", "5009", "D", [1160, 1450, 1760], [7.0, 7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["FI", "6009", "D", [1160, 1450, 1760], [7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["FI", "2511", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "5011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "2513", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "5013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "6013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        ["FI", "8013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "1206", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["CI", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["CI", "2506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["CI", "1207", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "2507", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["CI", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["CI", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["CI", "1509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["CI", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["CI", "2509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["CI", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["CI", "4009", "D", [1160, 1450, 1760], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["CI", "5009", "D", [1160, 1450, 1760], [7.0, 7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["CI", "6009", "D", [1160, 1450, 1760], [7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["CI", "2511", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "5011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "2513", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "1209","C", [1760,3500],[6.7,7.4,8.1,8.8,9.5]],
        # ["CI", "1511","B", [1760],[8.25,9,9.75,10.5,11.25]],
        # ["CI", "2510","C", [1760],[7,7.75,8.5,9.25,10]],
        # ["CI", "4011","C", [1760],[8,8.75,9.5,10.25,11]],
        # ["FI", "1209","C", [1760,3500],[6.7,7.4,8.1,8.8,9.5]],
        # ["FI", "1511","B", [1760],[8.25,9,9.75,10.5,11.25]],
        # ["FI", "2510","C", [1760],[7,7.75,8.5,9.25,10]],
        # ["FI", "4011","C", [1760],[8,8.75,9.5,10.25,11]],
        # ["KV", "1509","A", [1760,3500],[6.5,7.25,8,8.75,9.5]],
        # ["KV", "2011","A", [1760],[8.25,9,9.75,10.5,11.25]],
        # ["KS", "1509","A", [1760,3500],[6.5,7.25,8,8.75,9.5]],
        # ["KS", "2011","A", [1760],[8.25,9,9.75,10.5,11.25]],
        # ["KS", "8016","A", [1760],[11.5,12.75,14,15.25,16.5]],
        # ["KS", "1013","A", [1760],[9.5,10.375,11.25,12.125,13]],
        # ["KS", "1016","A", [1760],[11.5,12.625,13.75,14.875,16]],
        # ["KS", "1213","B", [1760],[9.5,10.375,11.25,12.125,13]],
        # ["KS", "1217","A", [1760],[13.5,14.5,15.5,16.5,17.3]],
    ]

    var_speed_trims = {
        "FI1206D_1800":[4.5, 5.25, 5.75, 6.25],
        "FI1207D_1800":[5.6, 6.3, 7.25],
        "FI1506D_1800":[4.3, 5.1, 5.5, 6.1, 6.25],
        "FI1507D_1800":[5.3, 6, 6.7, 7.25],
        "FI1509D_1800":[6.75, 7.5, 8.8, 9.5],
        "FI2007D_1800":[5.75, 6.25, 7.25],
        "FI2009D_1800":[7.3, 8.5, 9.5],
        "FI2506D_1800":[4.75, 5.2, 5.8, 6.25],
        "FI2507D_1800":[6.1, 7.25],
        "FI2509D_1800":[6.75, 7.9, 9, 9.5],
        "FI2511D_1800":[8.2, 9.3, 10.1, 11],
        "FI2513D_1800":[9.5, 10.8, 11.8, 13.1, 13.5],
        "FI3007D_1800":[6, 7.2, 7.25],
        "FI3009D_1800":[6.75, 7.7, 8.5, 9.5],
        "FI3011D_1800":[8.6, 9.9, 11],
        "FI3013D_1800":[10.1, 11, 11.8, 12.5, 13.5],
        "FI4007D_1800":[6.4, 7.25],
        "FI4009D_1800":[7, 7.8, 8.9, 9.5],
        "FI4013D_1800":[9.6, 10.4, 11.3, 12.4, 13.3, 13.5],
        "FI5007D_1800":[5.95, 6.7, 7.25],
        "FI5009D_1800":[7.3, 8.3, 9.2, 9.5],
        "FI5011D_1800":[8.2, 9.3, 10.1, 10.7, 11],
        "FI5013D_1800":[9.5, 10.1, 11, 11.9, 12.8, 13.5],
        "FI6009D_1800":[7.7, 8.4, 8.9, 9.5],
        "FI6011D_1800":[8.5, 9, 9.9, 10.6, 11],
        "FI6013D_1800":[9.7, 10.5, 11, 11.9, 12.9, 13.5],
        "FI8013D_1800":[9.8, 10.3, 10.9, 11.6, 12.5, 13.1, 13.5],
        "FI1206D_3600":[4.4, 5.1, 5.8, 6.25],
        "FI1207D_3600":[5.75, 6.2, 7.25],
        "FI1506D_3600":[4.8, 5.25, 6.1, 6.25],
        "FI1507D_3600":[5.25, 5.75, 6.6, 7.25],
        "FI1509D_3600":[6.8, 7.3, 7.8, 8.4, 9.1, 9.5],
        "FI2007D_3600":[5.5, 6.3, 7, 7.25],
        "FI2009D_3600":[7.1, 7.6, 8, 8.7, 9.4, 9.5],
        "FI2506D_3600":[4.7, 5.2, 5.7, 6.25],
        "FI2507D_3600":[5.9, 6.3, 6.8, 7.25],
        "FI2509D_3600":[7.3, 8.1, 8.7, 9.1, 9.5],
        "FI3007D_3600":[5.25, 5.75, 6.2, 6.6, 7.25],
        "FI3009D_3600":[6.9, 7.4, 7.8, 8.5, 9.4, 9.5],
        "FI4007D_3600":[5.8, 6.1, 6.6, 7.1, 7.25],
        "FI5007D_3600":[6.1, 6.5, 6.85, 7.25],
        "CI1206D_1800":[4.5, 5.25, 5.75, 6.25],
        "CI1207D_1800":[5.6, 6.3, 7.25],
        "CI1506D_1800":[4.3, 5.1, 5.5, 6.1, 6.25],
        "CI1507D_1800":[5.3, 6, 6.7, 7.25],
        "CI1509D_1800":[6.75, 7.5, 8.8, 9.5],
        "CI2007D_1800":[5.75, 6.25, 7.25],
        "CI2009D_1800":[7.3, 8.5, 9.5],
        "CI2506D_1800":[4.75, 5.2, 5.8, 6.25],
        "CI2507D_1800":[6.1, 7.25],
        "CI2509D_1800":[6.75, 7.9, 9, 9.5],
        "CI2511D_1800":[8.2, 9.3, 10.1, 11],
        "CI2513D_1800":[9.5, 10.8, 11.8, 13.1, 13.5],
        "CI3007D_1800":[6, 7.2, 7.25],
        "CI3009D_1800":[6.75, 7.7, 8.5, 9.5],
        "CI3011D_1800":[8.6, 9.9, 11],
        "CI3013D_1800":[10.1, 11, 11.8, 12.5, 13.5],
        "CI4007D_1800":[6.4, 7.25],
        "CI4009D_1800":[7, 7.8, 8.9, 9.5],
        "CI4013D_1800":[9.6, 10.4, 11.3, 12.4, 13.3, 13.5],
        "CI5007D_1800":[5.95, 6.7, 7.25],
        "CI5009D_1800":[7.3, 8.3, 9.2, 9.5],
        "CI5011D_1800":[8.2, 9.3, 10.1, 10.7, 11],
        "CI5013D_1800":[9.5, 10.1, 11, 11.9, 12.8, 13.5],
        "CI6009D_1800":[7.7, 8.4, 8.9, 9.5],
        "CI6011D_1800":[8.5, 9, 9.9, 10.6, 11],
        "CI6013D_1800":[9.7, 10.5, 11, 11.9, 12.9, 13.5],
        "CI8013D_1800":[9.8, 10.3, 10.9, 11.6, 12.5, 13.1],
        "CI1206D_3600":[4.4, 5.1, 5.8, 6.25],
        "CI1207D_3600":[5.75, 6.2, 7.25],
        "CI1506D_3600":[4.8, 5.25, 6.1, 6.25],
        "CI1507D_3600":[5.25, 5.75, 6.6, 7.25],
        "CI1509D_3600":[6.8, 7.3, 7.8, 8.4, 9.1, 9.5],
        "CI2007D_3600":[5.5, 6.3, 7, 7.25],
        "CI2009D_3600":[7.1, 7.6, 8, 8.7, 9.4, 9.5],
        "CI2506D_3600":[4.7, 5.2, 5.7, 6.25],
        "CI2507D_3600":[5.9, 6.3, 6.8, 7.25],
        "CI2509D_3600":[7.3, 8.1, 8.7, 9.1, 9.5],
        "CI3007D_3600":[5.25, 5.75, 6.2, 6.6, 7.25],
        "CI3009D_3600":[6.9, 7.4, 7.8, 8.5, 9.4, 9.5],
        "CI4007D_3600":[5.8, 6.1, 6.6, 7.1, 7.25],
        "CI5007D_3600":[6.1, 6.5, 6.85, 7.25],
        "KV1506D_1800":[5.75, 6.25],
        "KV1507D_1800":[5.6, 6.3, 7.25],
        "KV2006D_1800":[4.3, 5.1, 5.5, 6.1, 6.25],
        "KV2007D_1800":[5.3, 6, 6.7, 7.25],
        "KV2009D_1800":[6.75, 7.5, 8.8, 9.5],
        "KV3006D_1800":[4.75, 5.2, 5.8, 6.25],
        "KV3007D_1800":[6.1, 7.25],
        "KV3009D_1800":[6.75, 7.9, 9, 9.5],
        "KV3011D_1800":[8.2, 9.3, 10.1, 11],
        "KV3013D_1800":[9.5, 10.8, 11.8, 13.1, 13.5],
        "KV4007D_1800":[6, 7.2, 7.25],
        "KV4009D_1800":[6.75, 7.7, 8.5, 9.5],
        "KV4011D_1800":[8.6, 9.9, 11],
        "KV4013D_1800":[10.1, 11, 11.8, 12.5, 13.5],
        "KV5007D_1800":[6.4, 7.25],
        "KV6007D_1800":[6.1, 6.9, 7.25],
        "KV6009D_1800":[7.3, 8.3, 9.2, 9.5],
        "KV6011D_1800":[8.2, 9.3, 10.1, 10.7, 11],
        "KV6013D_1800":[9.5, 10.1, 11, 11.9, 12.8, 13.5],
        "KV8011D_1800":[8.5, 9, 9.9, 10.6, 11],
        "KV8013D_1800":[9.7, 10.5, 11, 11.9, 12.9, 13.5],
        "KV1506D_3600":[4.4, 5.1, 5.8, 6.25],
        "KV1507D_3600":[5.75, 6.2, 7.25],
        "KV2006D_3600":[4.8, 5.25, 6.1, 6.25],
        "KV2007D_3600":[5.25, 5.75, 6.6, 7.25],
        "KV2009D_3600":[6.8, 7.3, 7.8, 8.4, 9.1, 9.5],
        "KV3006D_3600":[4.7, 5.2, 5.7, 6.25],
        "KV3007D_3600":[5.9, 6.3, 6.8, 7.25],
        "KV3009D_3600":[7.3, 8.1, 8.7, 9.1, 9.5],
        "KV4007D_3600":[5.25, 5.75, 6.2, 6.6, 7.25],
        "KV4009D_3600":[6.9, 7.4, 7.8, 8.5, 9.4, 9.5],
        "KV5007D_3600":[5.8, 6.1, 6.6, 7.1, 7.25],
        "KV6007D_3600":[6.2, 6.7, 7, 7.25],
        "KS1506D_1800":[5.75, 6.25],
        "KS1507D_1800":[5.6, 6.3, 7.25],
        "KS2006D_1800":[4.3, 5.1, 5.5, 6.1, 6.25],
        "KS2007D_1800":[5.3, 6, 6.7, 7.25],
        "KS2009D_1800":[6.75, 7.5, 8.8, 9.5],
        "KS3006D_1800":[4.75, 5.2, 5.8, 6.25],
        "KS3007D_1800":[6.1, 7.25],
        "KS3009D_1800":[6.75, 7.9, 9, 9.5],
        "KS3011D_1800":[8.2, 9.3, 10.1, 11],
        "KS3013D_1800":[9.5, 10.8, 11.8, 13.1, 13.5],
        "KS4007D_1800":[6, 7.2, 7.25],
        "KS4009D_1800":[6.75, 7.7, 8.5, 9.5],
        "KS4011D_1800":[8.6, 9.9, 11],
        "KS4013D_1800":[10.1, 11, 11.8, 12.5, 13.5],
        "KS5007D_1800":[6.4, 7.25],
        "KS6007D_1800":[6.1, 6.9, 7.25],
        "KS6009D_1800":[7.3, 8.3, 9.2, 9.5],
        "KS6011D_1800":[8.2, 9.3, 10.1, 10.7, 11],
        "KS6013D_1800":[9.5, 10.1, 11, 11.9, 12.8, 13.5],
        "KS8011D_1800":[8.5, 9, 9.9, 10.6, 11],
        "KS8013D_1800":[9.7, 10.5, 11, 11.9, 12.9, 13.5],
        "KS1506D_3600":[4.4, 5.1, 5.8, 6.25],
        "KS1507D_3600":[5.75, 6.2, 7.25],
        "KS2006D_3600":[4.8, 5.25, 6.1, 6.25],
        "KS2007D_3600":[5.25, 5.75, 6.6, 7.25],
        "KS2009D_3600":[6.8, 7.3, 7.8, 8.4, 9.1, 9.5],
        "KS3006D_3600":[4.7, 5.2, 5.7, 6.25],
        "KS3007D_3600":[5.9, 6.3, 6.8, 7.25],
        "KS3009D_3600":[7.3, 8.1, 8.7, 9.1, 9.5],
        "KS4007D_3600":[5.25, 5.75, 6.2, 6.6, 7.25],
        "KS4009D_3600":[6.9, 7.4, 7.8, 8.5, 9.4, 9.5],
        "KS5007D_3600":[5.8, 6.1, 6.6, 7.1, 7.25],
        "KS6007D_3600":[6.2, 6.7, 7, 7.25],
        "CI1209C_1800":[7.2,7.6,8.6,9.5],
        "CI1209C_3600":[6.7,7.55,8.2,8.8,9.25,9.5],
        "CI1511B_1800":[8.75,10.15,11,11.25],
        "CI2510C_1800":[7.3,8.25,9.25,10],
        "CI4011C_1800":[8,8.9,9.6,10.3,11],
        "FI1209C_1800":[7.2,7.6,8.6,9.5],
        "FI1209C_3600":[6.7,7.55,8.2,8.8,9.25,9.5],
        "FI1511B_1800":[8.75,10.15,11,11.25],
        "FI2510C_1800":[7.3,8.25,9.25,10],
        "FI4011C_1800":[8,8.9,9.6,10.3,11],
        "KV1509A_1800":[6.7,7.75,9.5],
        "KV1509A_3600":[6.5,7.45,8.15,8.7,9.5],
        "KV2011A_1800":[9.35,10.45,11.25],
        "KS1509A_1800":[6.7,7.75,9.5],
        "KS1509A_3600":[6.5,7.45,8.15,8.7,9.5],
        "KS2011A_1800":[9.35,10.45,11.25],
        "KS8016A_1800":[11.95,12.95,14,14.7,15.75,16.5],
        "KS1013A_1800":[9.85,10.55,11.35,12.1,13],
        "KS1016A_1800":[11.8,12.6,14,15.4,16],
        "KS1213B_1800":[9.6,10.4,11.1,11.6,12.4,12.75,13],
        "KS1217A_1800":[14,14.7,15.5,16.05,16.7,17.3],
    }

    return_string = "Pump, Speed, Diameter, Flow, Head, Flow, Eta, NPSH Flow, NPSH"

    for series, model, d, speeds, trims in pump_list:
        for speed in speeds:
            if speed in [1760, 3500]:
                if speed == 1760:
                    nomspeed = 1800
                else:
                    nomspeed = 3600

                print(f"Looking up : {series}{model}{d} {speed}rpm")
                pumpobj = Pump.objects.get(
                    series=series, pump_model=model, design_iteration=d, speed=speed
                )

                npsh_data = NPSHData.objects.filter(pump=pumpobj).values("flow", "npsh")
                npsh_data = np.array(
                    [
                        [point["flow"] * 4.402862, point["npsh"] * 3.28084]
                        for point in npsh_data
                    ]
                )
                npsh_data = npsh_data[np.argsort(npsh_data[:, 0])]
                npsh_coeffs = list(np.polyfit(npsh_data.T[0], npsh_data.T[1], 3))
                npsh_poly = np.poly1d(np.polyfit(npsh_data.T[0], npsh_data.T[1], 3))
                npsh_coeffs.insert(0, 0)
                npsh_coeffs.insert(0, 0)
                
                sample_npsh_flows = np.linspace(np.amin(npsh_data.T[0]).item(), np.amax(npsh_data.T[0]).item(), 30)
                sample_npsh = npsh_poly(sample_npsh_flows)

                max_trim = max(trims)
               
                
                for trim in var_speed_trims[f"{series}{model}{d}_{nomspeed}"]:
                    print(f'Looking up : {trim}" trim')
                    low_trim = max(filter(lambda n:n<=trim, trims))
                    print(f'low_trim: {low_trim}')
                    high_trim = min(filter(lambda n:n>=trim, trims))
                    print(f'high_trim: {high_trim}')

                    pump_trim_obj_low_trim = PumpTrim.objects.get(
                        pump__series=series,
                        pump__pump_model=model,
                        pump__design_iteration=d,
                        pump__speed=speed,
                        trim=low_trim,
                    )
                    pump_trim_obj_high_trim = PumpTrim.objects.get(
                        pump__series=series,
                        pump__pump_model=model,
                        pump__design_iteration=d,
                        pump__speed=speed,
                        trim=high_trim,
                    )
                    head_poly_low_trim = np.poly1d(
                        getattr(pump_trim_obj_low_trim.marketing_data, "headcoeffs")
                    )
                    eff_poly_low_trim = np.poly1d(getattr(pump_trim_obj_low_trim.marketing_data, "effcoeffs"))
                    head_poly_high_trim = np.poly1d(
                        getattr(pump_trim_obj_high_trim.marketing_data, "headcoeffs")
                    )
                    eff_poly_high_trim = np.poly1d(getattr(pump_trim_obj_high_trim.marketing_data, "effcoeffs"))
                    flows_high_trim = list(
                        MarketingCurveData.objects.filter(
                            curveid=pump_trim_obj_high_trim.marketing_data
                        )
                        .order_by("flow")
                        .values_list("flow", flat=True)
                    )

                    # print(f'flows_high_trim: {flows_high_trim}')
                    
                    trim_flows = [0]
                    if high_trim > low_trim:
                        trim_heads = [math.pow(trim/low_trim,2)*head_poly_low_trim(0)*((high_trim-trim)/(high_trim-low_trim))+math.pow(trim/high_trim,2)*head_poly_high_trim(0)*((trim-low_trim)/(high_trim-low_trim))]
                    else:
                        trim_heads = [head_poly_low_trim(0)]
                    trim_effs = [0]

                    for high_trim_sample_flow in np.linspace(flows_high_trim[-1] * 4.402862/20, flows_high_trim[-1] * 4.402862, 19):
                        trim_quad_a = head_poly_high_trim(high_trim_sample_flow)/math.pow(high_trim_sample_flow,2)
                        roots_poly_high_trim = np.roots(np.polysub(head_poly_high_trim, np.poly1d([trim_quad_a, 0, 0])))
                        high_trim_flow = 0
                        for root in roots_poly_high_trim:
                            if np.isreal(root) and root >= 0 and root <= high_trim_sample_flow*1.05:
                                high_trim_flow = np.real(root)
                                break
                        roots_poly_low_trim = np.roots(np.polysub(head_poly_low_trim, np.poly1d([trim_quad_a, 0, 0])))
                        low_trim_flow = 0
                        for root in roots_poly_low_trim:
                            if np.isreal(root) and root >= 0 and root <= high_trim_sample_flow*1.05:
                                low_trim_flow = np.real(root)
                                break
                        
                        if high_trim > low_trim:
                            trim_flows.append(low_trim_flow+((trim-low_trim)/(high_trim-low_trim))*(high_trim_flow-low_trim_flow))
                            trim_effs.append((math.pow(trim/low_trim,2)*eff_poly_low_trim(low_trim_flow)*((high_trim-trim)/(high_trim-low_trim))+math.pow(trim/high_trim,2)*eff_poly_high_trim(high_trim_flow)*((trim-low_trim)/(high_trim-low_trim)))*100)
                            trim_heads.append(math.pow(trim/low_trim,2)*head_poly_low_trim(low_trim_flow)*((high_trim-trim)/(high_trim-low_trim))+math.pow(trim/high_trim,2)*head_poly_high_trim(high_trim_flow)*((trim-low_trim)/(high_trim-low_trim)))
                        else:
                            trim_flows.append(low_trim_flow)
                            trim_effs.append(eff_poly_low_trim(low_trim_flow)*100)
                            trim_heads.append(head_poly_low_trim(low_trim_flow))


                    for sflow, shead, seff, snflow, snpsh in zip(trim_flows, trim_heads, trim_effs, sample_npsh_flows, sample_npsh):
                        if trim == max_trim:
                            return_string += f"\n{series}{model}{d}, {speed}, {trim}, {sflow}, {shead}, {sflow}, {seff}, {snflow}, {snpsh}"
                        else:
                            return_string += f"\n{series}{model}{d}, {speed}, {trim}, {sflow}, {shead}, {sflow}, {seff}, , "

    response = HttpResponse(return_string, content_type='text/plain')
    response['Content-Disposition'] = 'attachment; filename={0}'.format("Intelliquip_export.csv")
    return response

    # return HttpResponse(return_string, content_type="text/plain")


def interpolated_intercept(x, y1, y2):
    """Find the intercept of two curves, given by the same x data"""
    # print(f'x: {x}\ny1: {y1}\ny2: {y2}')

    def intercept(point1, point2, point3, point4):
        """find the intersection between two lines
        the first line is defined by the line between point1 and point2
        the first line is defined by the line between point3 and point4
        each point is an (x,y) tuple.

        So, for example, you can find the intersection between
        intercept((0,0), (1,1), (0,1), (1,0)) = (0.5, 0.5)

        Returns: the intercept, in (x,y) format
        """

        def line(p1, p2):
            A = p1[1] - p2[1]
            B = p2[0] - p1[0]
            C = p1[0] * p2[1] - p2[0] * p1[1]
            return A, B, -C

        def intersection(L1, L2):
            D = L1[0] * L2[1] - L1[1] * L2[0]
            Dx = L1[2] * L2[1] - L1[1] * L2[2]
            Dy = L1[0] * L2[2] - L1[2] * L2[0]

            x = Dx / D
            y = Dy / D
            return x, y

        L1 = line([point1[0], point1[1]], [point2[0], point2[1]])
        L2 = line([point3[0], point3[1]], [point4[0], point4[1]])

        R = intersection(L1, L2)

        return R

    idx = np.argwhere(np.diff(np.sign(y1 - y2)) != 0)
    xc, yc = intercept(
        (x[idx], y1[idx]),
        ((x[idx + 1], y1[idx + 1])),
        ((x[idx], y2[idx])),
        ((x[idx + 1], y2[idx + 1])),
    )
    # print(f'xc:{xc}')
    # print(f'yc:{yc}')
    return xc.item(0), yc.item(0)


def adjust4013(request):
    testids = [273, 272, 271]
    for testid in testids:
        testobj = ReducedPumpTestDetails.objects.get(id=testid)
        testdata = ReducedPumpTestData.objects.filter(testid=testobj)
        testdata.update(head=F("head") * 0.99)
    return HttpResponse("DID IT")


def flattenInflection(request):
    flatten_inflection_list = [["KV", "2009", 1450, 20]]
    for series, model, speed, percent in flatten_inflection_list:
        market_curves = PumpTrim.objects.filter(
            pump__series=series, pump__pump_model=model, pump__speed=speed
        ).values("marketing_data")
        for curve in market_curves:
            print(f'curve:{curve["marketing_data"]}')
            curve = MarketingCurveDetail.objects.get(id=curve["marketing_data"])
            bep_flow = getattr(curve, "bep_flow")
            print(f"curve:{curve}")
            curvedataqs = MarketingCurveData.objects.filter(curveid=curve).order_by(
                "-flow"
            )
            flat_head = 0
            flow = []
            head = []
            for datapoint in curvedataqs:
                print(f"datapointflow:{datapoint.flow}, 15% bep_flow:{bep_flow *.15}")
                flow.append(datapoint.flow)
                head.append(datapoint.head)
                if datapoint.flow < percent * bep_flow / 100:
                    if flat_head == 0:
                        flat_head = datapoint.head
                    else:
                        print(f"before:{datapoint.head}")
                        datapoint.head = flat_head
                        datapoint.save()
                        print(f"after:{datapoint.head}")
            flow = np.array(flow)
            head = np.array(head)
            headcoeffs = list(np.polyfit(flow / 0.227125, head / 0.3048, 5))
            curve.headcoeffs = headcoeffs
            curve.save()

    return HttpResponse(f"Flattened: {flatten_inflection_list}")


def copyKS(request):
    # ks_list = ["1509", "2011"]
    ks_list = []
    for model in ks_list:
        kv_pumps = PumpTrim.objects.filter(pump__series="KV", pump__pump_model=model)
        for pump in kv_pumps:
            # pumpid = Pump.objects.get(id=pump.pump)

            design = getattr(pump.pump, "design_iteration")
            speed = getattr(pump.pump, "speed")
            eng = pump.engineering_data
            trim = pump.trim
            mark = pump.marketing_data
            print(f"model:{model}")
            # ks_pump = PumpTrim.objects.get(
            #     pump__series="KS",
            #     pump__pump_model=model,
            #     pump__design_iteration=design,
            #     pump__speed=speed,
            #     trim=trim,
            # )
            # ks_pump.engineering_data = eng
            # ks_pump.marketing_data = mark
            # ks_pump.save()
    # for model in ks_list:
    #     NPSH_data_lines = NPSHData.objects.filter(
    #         pump__series="CI", pump__pump_model=model
    #     )

    #     NPSHData.objects.filter(pump__series="FI", pump__pump_model=model).delete()
    #     for npsh in NPSH_data_lines:
    #         # pumpid = Pump.objects.get(id=pump.pump)
    #         design = getattr(npsh.pump, "design_iteration")
    #         speed = getattr(npsh.pump, "speed")
    #         flow = npsh.flow
    #         npsh_head = npsh.npsh
    #         print(f"model:{model}")
    #         ks_pump = Pump.objects.get(
    #             series="FI", pump_model=model, design_iteration=design, speed=speed
    #         )
    #         ks_npsh_line = NPSHData(pump=ks_pump, flow=flow, npsh=npsh_head)
    #         ks_npsh_line.save()

    return HttpResponse(f"KS copied: {ks_list}")


def getPEIupload(request):
    # Manufacturer, Brand, Basic Model, model number, Equipment Category, Configuration, Full trim, 3, 1, Nominal Speed, , yes, Motor Efficiency,
    # Motor horsepower, yes, 100% BEP Flow, 75% BEP Flow, 110% BEP Flow, , , 100% BEP Head,  ,  , , , Driver Input Power @ 100% , Driver Input Power @ 75% ,
    # Driver Input Power @ 110%, , , Control power input at 25%, Control power input at 50%, Control power input at 75%, Control power input at 100%,
    # PEI, Head at 75%, Head at 110%, Head at 65%, Head at 90%, 109,
    pump_str = [
        # ["FI", "1206", "D", [1760, 3500], 6.25],
        # ["FI", "1506", "D", [1760, 3500], 6.25],
        # ["FI", "2506", "D", [1760, 3500], 6.25],
        # ["FI", "1207", "D", [1760, 3500], 7.25],
        # ["FI", "1507", "D", [1760, 3500], 7.25],
        # ["FI", "2007", "D", [1760, 3500], 7.25],
        # ["FI", "2507", "D", [1760, 3500], 7.25],
        # ["FI", "3007", "D", [1760, 3500], 7.25],
        # ["FI", "4007", "D", [1760, 3500], 7.25],
        # ["FI", "5007", "D", [1760, 3500], 7.25],
        # ["FI", "1509", "D", [1760, 3500], 9.5],
        # ["FI", "2009", "D", [1760, 3500], 9.5],
        # ["FI", "2509", "D", [1760, 3500], 9.5],
        # ["FI", "3009", "D", [1760, 3500], 9.5],
        # ["FI", "4009", "D", [1760], 9.5],
        # ["FI", "5009", "D", [1760], 9.5],
        # ["FI", "6009", "D", [1760], 9.5],
        # ["FI", "2511", "D", [1760], 11.0],
        # ["FI", "3011", "D", [1760], 11.0],
        # ["FI", "5011", "D", [1760], 11.0],
        # ["FI", "6011", "D", [1760], 11.0],
        # ["FI", "2513", "D", [1760], 13.5],
        # ["FI", "3013", "D", [1760], 13.5],
        # ["FI", "4013", "D", [1760], 13.5],
        # ["FI", "5013", "D", [1760], 13.5],
        # ["FI", "6013", "D", [1760], 13.5],
        ["FI", "8013", "D", [1760], 13.5],
        # ["CI", "1206", "D", [1760, 3500], 6.25],
        # ["CI", "1506", "D", [1760, 3500], 6.25],
        # ["CI", "2506", "D", [1760, 3500], 6.25],
        # ["CI", "1207", "D", [1760, 3500], 7.25],
        # ["CI", "1507", "D", [1760, 3500], 7.25],
        # ["CI", "2007", "D", [1760, 3500], 7.25],
        # ["CI", "2507", "D", [1760, 3500], 7.25],
        # ["CI", "3007", "D", [1760, 3500], 7.25],
        # ["CI", "4007", "D", [1760, 3500], 7.25],
        # ["CI", "5007", "D", [1760, 3500], 7.25],
        # ["CI", "1509", "D", [1760, 3500], 9.5],
        # ["CI", "2009", "D", [1760, 3500], 9.5],
        # ["CI", "2509", "D", [1760, 3500], 9.5],
        # ["CI", "3009", "D", [1760, 3500], 9.5],
        # ["CI", "4009", "D", [1760], 9.5],
        # ["CI", "5009", "D", [1760], 9.5],
        # ["CI", "6009", "D", [1760], 9.5],
        # ["CI", "2511", "D", [1760], 11.0],
        # ["CI", "3011", "D", [1760], 11.0],
        # ["CI", "5011", "D", [1760], 11.0],
        # ["CI", "6011", "D", [1760], 11.0],
        # ["CI", "2513", "D", [1760], 13.5],
        # ["CI", "3013", "D", [1760], 13.5],
        # ["CI", "4013", "D", [1760], 13.5],
        # ["KV", "6007", "D", [1760, 3500], 7.25],
        # ["KV", "3009", "D", [1760, 3500], 9.5],
        # ["KV", "3011", "D", [1760], 11.0],
        # ["KV", "3013", "D", [1760], 13.5],
        # ["KV", "4009", "D", [1760, 3500], 9.5],
        # ["KV", "4011", "D", [1760], 11.0],
        # ["KV", "4013", "D", [1760], 13.5],
        # ["KV", "6007", "D", [1760, 3500], 7.25],
        # ["KV", "6011", "D", [1760], 11.0],
        # ["KV", "6013", "D", [1760], 13.5],
        # ["KV", "8011", "D", [1760], 11.0],
        # ["KV", "8013", "D", [1760], 13.5],
        # ["KV", "1509", "C", [1760, 3500], 9.5],
        # ["KV", "2011", "C", [1760], 11.25],
        # ["KS", "3009", "D", [1760, 3500], 9.5],
        # ["KS", "3011", "D", [1760], 11.0],
        # ["KS", "3013", "D", [1760], 13.5],
        # ["KS", "4009", "D", [1760, 3500], 9.5],
        # ["KS", "4011", "D", [1760], 11.0],
        # ["KS", "4013", "D", [1760], 13.5],
        # ["KS", "6007", "D", [1760, 3500], 7.25],
        # ["KS", "6011", "D", [1760], 11.0],
        # ["KS", "6013", "D", [1760], 13.5],
        # ["KS", "8011", "D", [1760], 11.0],
        # ["KS", "8013", "D", [1760], 13.5],
        # ["KS", "1509", "C", [1760, 3500], 9.5],
        # ["KS", "2011", "C", [1760], 11.25],
        # ["KS", "8016", "C", [1760], 16.5],
        # ["KS", "1013", "A", [1760], 13.0],
        # ["1600", "1611", "C", [1760, 3500], 4.75],
        # ["1600", "1615", "C", [1760], 6.35],
        # ["1600", "1615", "C", [3500], 6.25],
        # ["1600", "1619", "C", [1760], 7.9],
        # ["1600", "1635", "C", [1760], 6.15],
        # ["1600", "1635", "C", [3500], 5.75],
        # ["1600", "1641", "C", [1760], 7.9],
        # ["FI", "1209", "B", [1760], 9.5],
        # ["FI", "1209", "B", [3500], 9.5],
        # ["FI", "1511", "B", [1760], 11.25],
        # ["FI", "2510", "C", [1760], 10.0],
        # ["FI", "1206", "B", [1760, 3500], 6.25],
        # ["FI", "1506", "B", [1760, 3500], 6.25],
        # ["FI", "1207", "B", [1760, 3500], 7.5],
        # ["FI", "2007", "A", [1760, 3500], 7.25],
        # ["FI", "4007", "A", [1760, 3500], 7.5],
        # ["FI", "5007", "A", [1760, 3500], 7.15],
        # ["FI", "2509", "C", [1760, 3500], 9.5],
        # ["FI", "3009", "C", [1760, 3500], 9.25],
        # ["FI", "5009", "C", [1760], 9.25],
        # ["FI", "6009", "B", [1760], 9.5],
        # ["FI", "2511", "A", [1760], 11.25],
        # ["FI", "3011", "A", [1760], 11.25],
        # ["FI", "5011", "A", [1760], 11.25],
        # ["FI", "6011", "A", [1760], 11.25],
        # ["FI", "2513", "A", [1760], 13.0],
        # ["FI", "3013", "A", [1760], 13.0],
        # ["FI", "4013", "A", [1760], 12.75],
        # ["FI", "5013", "A", [1760], 13.0],
        # ["FI", "6013", "A", [1760], 13.0],
        # ["FI", "8013", "A", [1760], 13.25],
        # ["FI", "1509", "C", [1760, 3500], 9.25],
        # ["FI", "2009", "C", [1760, 3500], 9.5],
        # ["FI", "4009", "C", [1760], 9.25],
        # ["FI", "1507", "B", [1760, 3500], 7.5],
        # ["KV", "6011", "A", [1760], 11.25],
        # ["KV", "1506", "A", [1760, 3500], 6.25],
        # ["KV", "3009", "A", [1760, 3500], 9.25],
        # ["KV", "4009", "A", [1760, 3500], 9.25],
        # ["KV", "4011", "A", [1760], 11.25],
        # ["KV", "6011", "A", [1760], 11.25],
        # ["KV", "8011", "A", [1760], 11.25],
        # ["KV", "6013", "A", [1760], 13.0],
        # ["KV", "2510", "A", [1760], 10.25],
        # ["KV", "2006", "A", [1760, 3500], 6.25],
        # ["KV", "1507", "A", [1760, 3500], 7.5],
        # ["KV", "2007", "A", [1760, 3500], 7.5],
        # ["KV", "3007", "A", [1760, 3500], 7.5],
        # ["KV", "2009", "A", [1760, 3500], 9.25],
        # ["KV", "6009", "A", [1760], 9.25],
        # ["KV", "3011", "A", [1760], 11.25],
        # ["KV", "4013", "A", [1760], 13.0],
        # ["KV", "8013", "A", [1760], 13.0],
        # ["FI", "1207", "D", [1160], 7.25],
        # ["FI", "1507", "D", [1160], 7.25],
        # ["FI", "2007", "D", [1160], 7.25],
        # ["FI", "2507", "D", [1160], 7.25],
        # ["FI", "3007", "D", [1160], 7.25],
        # ["FI", "4007", "D", [1160], 7.25],
        # ["FI", "5007", "D", [1160], 7.25],
        # ["FI", "1509", "D", [1160], 9.5],
        # ["FI", "2009", "D", [1160], 9.5],
        # ["FI", "2509", "D", [1160], 9.5],
        # ["FI", "3009", "D", [1160], 9.5],
        # ["FI", "4009", "D", [1160], 9.5],
        # ["FI", "5009", "D", [1160], 9.5],
        # ["FI", "6009", "D", [1160], 9.5],
        # ["FI", "2511", "D", [1160], 11.0],
        # ["FI", "3011", "D", [1160], 11.0],
        # ["FI", "5011", "D", [1160], 11.0],
        # ["FI", "6011", "D", [1160], 11.0],
        # ["FI", "2513", "D", [1160], 13.5],
        # ["FI", "3013", "D", [1160], 13.5],
        # ["FI", "4013", "D", [1160], 13.5],
        # ["FI", "5013", "D", [1160], 13.5],
        # ["FI", "6013", "D", [1160], 13.5],
        # ["FI", "8013", "D", [1160], 13.5],
        # ["CI", "1207", "D", [1160], 7.25],
        # ["CI", "1507", "D", [1160], 7.25],
        # ["CI", "2007", "D", [1160], 7.25],
        # ["CI", "2507", "D", [1160], 7.25],
        # ["CI", "3007", "D", [1160], 7.25],
        # ["CI", "4007", "D", [1160], 7.25],
        # ["CI", "5007", "D", [1160], 7.25],
        # ["CI", "1509", "D", [1160], 9.5],
        # ["CI", "2009", "D", [1160], 9.5],
        # ["CI", "2509", "D", [1160], 9.5],
        # ["CI", "3009", "D", [1160], 9.5],
        # ["CI", "4009", "D", [1160], 9.5],
        # ["CI", "5009", "D", [1160], 9.5],
        # ["CI", "6009", "D", [1160], 9.5],
        # ["CI", "2511", "D", [1160], 11.0],
        # ["CI", "3011", "D", [1160], 11.0],
        # ["CI", "5011", "D", [1160], 11.0],
        # ["CI", "6011", "D", [1160], 11.0],
        # ["CI", "2513", "D", [1160], 13.5],
        # ["CI", "3013", "D", [1160], 13.5],
        # ["CI", "4013", "D", [1160], 13.5],
        # ["KV", "6007", "D", [1160], 7.25],
        # ["KV", "3009", "D", [1160], 9.5],
        # ["KV", "3011", "D", [1160], 11.0],
        # ["KV", "3013", "D", [1160], 13.5],
        # ["KV", "4009", "D", [1160], 9.5],
        # ["KV", "4011", "D", [1160], 11.0],
        # ["KV", "4013", "D", [1160], 13.5],
        # ["KV", "6007", "D", [1160], 7.25],
        # ["KV", "6011", "D", [1160], 11.0],
        # ["KV", "6013", "D", [1160], 13.5],
        # ["KV", "8011", "D", [1160], 11.0],
        # ["KV", "8013", "D", [1160], 13.5],
        # ["KV", "1509", "C", [1160], 9.5],
        # ["KV", "2011", "C", [1160], 11.25],
        # ["KS", "3009", "D", [1160], 9.5],
        # ["KS", "3011", "D", [1160], 11.0],
        # ["KS", "3013", "D", [1160], 13.5],
        # ["KS", "4009", "D", [1160], 9.5],
        # ["KS", "4011", "D", [1160], 11.0],
        # ["KS", "4013", "D", [1160], 13.5],
        # ["KS", "6007", "D", [1160], 7.25],
        # ["KS", "6011", "D", [1160], 11.0],
        # ["KS", "6013", "D", [1160], 13.5],
        # ["KS", "8011", "D", [1160], 11.0],
        # ["KS", "8013", "D", [1160], 13.5],
        # ["KS", "1509", "C", [1160], 9.5],
        # ["KS", "2011", "C", [1160], 11.25],
        # ["KS", "8016", "C", [1160], 16.5],
        # ["KS", "1013", "C", [1160], 13.0],
        # ["1600", "1611", "C", [1160], 4.75],
        # ["1600", "1615", "C", [1160], 6.35],
        # ["1600", "1619", "C", [1160], 7.9],
        # ["1600", "1635", "C", [1160], 6.15],
        # ["1600", "1641", "C", [1160], 7.9],
        ["FI", "4011", "C", [1760], 11.0],
    ]
    return_string = ""
    return_string_california = ""
    return_string_DOE = ""
    for series, model, d, speeds, trim in pump_str:
        for speed in speeds:
            print(f"Looking up :\n {series}{model}{d} {speed}rpm")
            pump_trim_obj = PumpTrim.objects.get(
                pump__series=series,
                pump__pump_model=model,
                pump__design_iteration=d,
                pump__speed=speed,
                trim=trim,
            )
            flows_m3_per_hr = list(
                MarketingCurveData.objects.filter(curveid=pump_trim_obj.marketing_data)
                .order_by("flow")
                .values_list("flow", flat=True)
            )
            heads_m = list(
                MarketingCurveData.objects.filter(curveid=pump_trim_obj.marketing_data)
                .order_by("flow")
                .values_list("head", flat=True)
            )
            powers_kw = list(
                MarketingCurveData.objects.filter(curveid=pump_trim_obj.marketing_data)
                .order_by("flow")
                .values_list("power", flat=True)
            )

            # Database to store values in SI Units with clear water at specific gravity 1.0
            # Flow - m3/hr
            # Head - m
            # Power - KW
            # Temperature - Kelvin

            bep_flow_m3_per_hr = getattr(pump_trim_obj.marketing_data, "bep_flow")
            flow_50_m3_per_hr = 0.5 * bep_flow_m3_per_hr
            flow_75_m3_per_hr = 0.75 * bep_flow_m3_per_hr
            flow_110_m3_per_hr = 1.1 * bep_flow_m3_per_hr
            flow_120_m3_per_hr = 1.2 * bep_flow_m3_per_hr

            # headpoly_m = np.poly1d(np.polyfit(flows_m3_per_hr, heads_m, 6))
            # powerpoly_kw = np.poly1d(np.polyfit(flows_m3_per_hr, powers_kw, 6))
            # print(f"{headpoly_m(bep_flow_m3_per_hr)=}")
            # bep_head_ft = float(headpoly_m(bep_flow_m3_per_hr))*3.28084
            # head_50_ft = headpoly_m(flow_50_m3_per_hr)*3.28084
            # head_75_ft = headpoly_m(flow_75_m3_per_hr)*3.28084
            # head_110_ft = headpoly_m(flow_110_m3_per_hr)*3.28084

            # bep_power_hp = powerpoly_kw(bep_flow_m3_per_hr)*1.34102
            # power_50_hp = powerpoly_kw(flow_50_m3_per_hr)*1.34102
            # power_75_hp = powerpoly_kw(flow_75_m3_per_hr)*1.34102
            # power_110_hp = powerpoly_kw(flow_110_m3_per_hr)*1.34102
            # power_120_hp = powerpoly_kw(flow_120_m3_per_hr)*1.34102
            
            headpoly_m = P.polyfit(flows_m3_per_hr, heads_m, 6)
            powerpoly_kw = P.polyfit(flows_m3_per_hr, powers_kw, 6)
            print(f"{P.polyval(bep_flow_m3_per_hr, headpoly_m)=}")
            bep_head_ft = P.polyval(bep_flow_m3_per_hr, headpoly_m)*3.28084
            head_50_ft = P.polyval(flow_50_m3_per_hr, headpoly_m)*3.28084
            head_75_ft = P.polyval(flow_75_m3_per_hr, headpoly_m)*3.28084
            head_110_ft = P.polyval(flow_110_m3_per_hr, headpoly_m)*3.28084

            bep_power_hp = P.polyval(bep_flow_m3_per_hr, powerpoly_kw)*1.34102
            power_50_hp = P.polyval(flow_50_m3_per_hr, powerpoly_kw)*1.34102
            power_75_hp = P.polyval(flow_75_m3_per_hr, powerpoly_kw)*1.34102
            power_110_hp = P.polyval(flow_110_m3_per_hr, powerpoly_kw)*1.34102
            power_120_hp = P.polyval(flow_120_m3_per_hr, powerpoly_kw)*1.34102


            flow_50_gpm = flow_50_m3_per_hr*4.402862
            flow_75_gpm = flow_75_m3_per_hr*4.402862
            bep_flow_gpm = bep_flow_m3_per_hr*4.402862
            flow_110_gpm = flow_110_m3_per_hr*4.402862
            flow_120_gpm =  flow_120_m3_per_hr*4.402862

            bep_head_m = P.polyval(bep_flow_m3_per_hr, headpoly_m)
            head_50_m = P.polyval(flow_50_m3_per_hr, headpoly_m)
            head_75_m = P.polyval(flow_75_m3_per_hr, headpoly_m)
            head_110_m = P.polyval(flow_110_m3_per_hr, headpoly_m)

            bep_power_kw = P.polyval(bep_flow_m3_per_hr, powerpoly_kw)
            power_50_kw = P.polyval(flow_50_m3_per_hr, powerpoly_kw)
            power_75_kw = P.polyval(flow_75_m3_per_hr, powerpoly_kw)
            power_110_kw = P.polyval(flow_110_m3_per_hr, powerpoly_kw)
            power_120_kw = P.polyval(flow_120_m3_per_hr, powerpoly_kw)

            flow_50_m3_per_hr = flow_50_m3_per_hr
            flow_75_m3_per_hr = flow_75_m3_per_hr
            flow_110_m3_per_hr = flow_110_m3_per_hr
            flow_120_m3_per_hr =  flow_120_m3_per_hr


            bep_eff = bep_flow_gpm*bep_head_ft/(bep_power_hp*3960)*100
            eff_50 = flow_50_gpm*head_50_ft/(power_50_hp*3960)*100
            eff_75 = flow_75_gpm*head_75_ft/(power_75_hp*3960)*100
            eff_110 = flow_110_gpm*head_110_ft/(power_110_hp*3960)*100

            if series == "FI":
                category = "ESFM"
                hi_category = "OH1"
            elif series == "CI":
                category = "ESCC"
                hi_category = "OH7"
            elif series == "KS":
                category = "IL"
                hi_category = "OH4"
            elif series == "KV":
                category = "IL"
                hi_category = "OH5"
            else:
                category = "IL"
                hi_category = "OH3"

            design_iteration = d.upper()
            if speed == 1760:
                nomspeed = 1800
                modelnumber = f"{series}{model}{design_iteration}-4P-PM"
                varspeedmodelnumber_1 = f"S{series}{model}{design_iteration}D-4P-PD"
                varspeedmodelnumber_2 = f"S{series}{model}{design_iteration}4-4P-PD"
                varspeedmodelnumber_california = f"S{series}{model}{design_iteration}*-4P-PD"
            elif speed == 3500:
                nomspeed = 3600
                modelnumber = f"{series}{model}{design_iteration}-2P-PM"
                varspeedmodelnumber_1 = f"S{series}{model}{design_iteration}F-2P-PD"
                varspeedmodelnumber_2 = f"S{series}{model}{design_iteration}6-2P-PD"
                varspeedmodelnumber_california = f"S{series}{model}{design_iteration}*-2P-PD"
            elif speed == 1160:
                nomspeed = 1200
                modelnumber = f"{series}{model}{design_iteration}-6P-PM"
                varspeedmodelnumber_1 = f"S{series}{model}{design_iteration}F-6P-PD"
                varspeedmodelnumber_2 = f"S{series}{model}{design_iteration}6-6P-PD"
                varspeedmodelnumber_california = f"S{series}{model}{design_iteration}*-6P-PD"

            pei = calculatePEI(
                bep_flow_m3_per_hr,
                bep_head_m,
                bep_power_kw,
                flow_75_m3_per_hr,
                head_75_m,
                power_75_kw,
                flow_110_m3_per_hr,
                head_110_m,
                power_110_kw,
                power_120_kw,
                speed,
                category,
                "BP"
            )
            print(f"{pei:}")
            pump_trim_obj.marketing_data.__dict__.update(peicl=pei['PEIcl'])
            pump_trim_obj.marketing_data.__dict__.update(peivl=pei['PEIvl'])
            pump_trim_obj.marketing_data.save()

            # pei = evaluatePEIrule(
            #     bep_flow_m3_per_hr,
            #     bep_head_m,
            #     bep_power_kw,
            #     flow_75_m3_per_hr,
            #     head_75_m,
            #     power_75_kw,
            #     flow_110_m3_per_hr,
            #     head_110_m,
            #     power_110_kw,
            #     power_120_kw,
            #     speed,
            #     category,
            #     "BP"
            # )
            # pump_trim_obj.marketing_data.__dict__.update(peicl=pei['PEIcl'])
            # pump_trim_obj.marketing_data.__dict__.update(peivl=pei['PEIvl'])
            # pump_trim_obj.marketing_data.save()
            """
            return {
                "status": "success",
                "PEIcl": PEIcl,
                "PEIvl": PEIvl,
                "flow_bep": bep_flow_corr,
                "head_50": head_50_corr,
                "head_75": head_75_corr,
                "head_bep": bep_head_corr,
                "head_110": head_110_corr,
                "power_50": power_50_corr,
                "power_75": power_75_corr,
                "power_bep": bep_power_corr,
                "power_110": power_110_corr,
                "controller_power_25": drive_input_power_25,
                "controller_power_50": drive_input_power_50,
                "controller_power_75": drive_input_power_75,
                "controller_power_bep": drive_input_power_bep,
                "motor_hp": motor_hp,
                "motor_eff": motor_eff,
            }
            """
            if category == "ESFM":
                if nomspeed == 1800:
                    california_equipment_class_cl = 5
                    california_equipment_class_vl = 7
                else:
                    california_equipment_class_cl = 6
                    california_equipment_class_vl = 8
            elif category == "ESCC":
                if nomspeed == 1800:
                    california_equipment_class_cl = 1
                    california_equipment_class_vl = 3
                else:
                    california_equipment_class_cl = 2
                    california_equipment_class_vl = 4
            else:
                if nomspeed == 1800: 
                    california_equipment_class_cl = 9
                    california_equipment_class_vl = 11
                else:
                    california_equipment_class_cl = 10
                    california_equipment_class_vl = 12

            return_string += f"Taco,Taco,{series}{model},{modelnumber},{category},Bare pump + motor,{trim},5,1,{nomspeed},,yes,{pei['motor_eff']},{pei['motor_hp']},yes,{pei['flow_bep']},{pei['flow_bep']*0.75},{pei['flow_bep']*1.1},,,{pei['head_bep']},,,,,{pei['power_bep']},{pei['power_75']},{pei['power_110']},,,,,,,{pei['PEIcl']},{pei['head_75']},{pei['head_110']},,,109,\n"
            return_string += f"Taco,Taco,S{series}{model},{varspeedmodelnumber_1},{category},Bare pump + motor + continuous control,{trim},7,1,{nomspeed},,yes,{pei['motor_eff']},{pei['motor_hp']},yes,{pei['flow_bep']},{pei['flow_bep']*0.75},{pei['flow_bep']*1.1},,,{pei['head_bep']},,,,,,,,,,{pei['controller_power_25']},{pei['controller_power_50']},{pei['controller_power_75']},{pei['controller_power_bep']},{pei['PEIvl']},{pei['head_75']},{pei['head_110']},,,109,\n"
            return_string += f"Taco,Taco,S{series}{model},{varspeedmodelnumber_2},{category},Bare pump + motor + continuous control,{trim},7,1,{nomspeed},,yes,{pei['motor_eff']},{pei['motor_hp']},yes,{pei['flow_bep']},{pei['flow_bep']*0.75},{pei['flow_bep']*1.1},,,{pei['head_bep']},,,,,,,,,,{pei['controller_power_25']},{pei['controller_power_50']},{pei['controller_power_75']},{pei['controller_power_bep']},{pei['PEIvl']},{pei['head_75']},{pei['head_110']},,,109,\n"
            # return_string_california += f"A,Taco,Taco,{modelnumber},I,BP,{california_equipment_class_cl},{pei['PEIcl']},,{pei['head_bep']},{pei['flow_bep']},{nomspeed},,{trim},1,,{pei['power_75']},{pei['power_bep']},{pei['power_110']},{pei['PERcl']},,,,C,,,,,,,,,,{pei['c_factor']}\n"
            # return_string_california += f"A,Taco,Taco,{varspeedmodelnumber_california},I,C,{california_equipment_class_vl},,{pei['PEIvl']},{pei['head_bep']},{pei['flow_bep']},{nomspeed},,{trim},1,,,,,,,,,,,{pei['controller_power_25']},{pei['controller_power_50']},{pei['controller_power_75']},{pei['controller_power_bep']},C,{pei['PERvl']},{pei['motor_eff']},{pei['motor_hp']},{pei['c_factor']}\n"
            # return_string += f"{series}{model},{nomspeed},{flow_50},{head_50},{eff_50},{flow_75},{head_75},{eff_75},{bep_flow},{bep_head},{bep_eff},{flow_110},{head_110},{eff_110},\n"
            # return_string_DOE += f"Taco,{series}{model},{category},1,{speed},{bep_flow_gpm},{bep_head_ft},{bep_eff},{bep_power_hp},{flow_75_gpm},{eff_75},{power_75_hp},{flow_110_gpm},{eff_110},{power_110_hp}\n"
            # return_string_DOE += f"Taco,{series}{model}{design_iteration},{category},1,{speed},{pei['PEIcl_EL2']},{pei['PEIcl_EL3']},{pei['PEIcl_EL4']},{pei['PEIcl_EL5']}\n"
            # return_string_DOE += f"Taco,{modelnumber},{category},{hi_category},1,N/A,{nomspeed},,,,,{bep_flow_gpm},{bep_head_ft},{bep_eff},{bep_power_hp},{flow_75_gpm},{head_75_ft},{eff_75},{power_75_hp},{flow_110_gpm},{head_75_ft},{eff_110},{power_110_hp}\n"


    return HttpResponse(return_string, content_type="text/plain")
    # return HttpResponse(return_string_DOE, content_type="text/plain")


def populateCurveNos(request):
    pump_str = [
        # ["CI", "1206", "D", 3500, 4179],
        # ["CI", "1206", "D", 1760, 4180],
        # ["CI", "1206", "D", 2900, 4181],
        # ["CI", "1206", "D", 1450, 4182],
        # ["CI", "1506", "D", 3500, 4188],
        # ["CI", "1506", "D", 1760, 4189],
        # ["CI", "1506", "D", 2900, 4190],
        # ["CI", "1506", "D", 1450, 4191],
        # ["CI", "1207", "D", 3500, 4183],
        # ["CI", "1207", "D", 1760, 4184],
        # ["CI", "1207", "D", 2900, 4185],
        # ["CI", "1207", "D", 1450, 4186],
        # ["CI", "1207", "D", 1160, 4187],
        # ["CI", "1507", "D", 3500, 4192],
        # ["CI", "1507", "D", 1760, 4193],
        # ["CI", "1507", "D", 2900, 4194],
        # ["CI", "1507", "D", 1450, 4195],
        # ["CI", "1507", "D", 1160, 4196],
        # ["CI", "1509", "D", 3500, 4197],
        # ["CI", "1509", "D", 1760, 4198],
        # ["CI", "1509", "D", 2900, 4199],
        # ["CI", "1509", "D", 1450, 4200],
        # ["CI", "1509", "D", 1160, 4201],
        # ["CI", "2007", "D", 3500, 4202],
        # ["CI", "2007", "D", 1760, 4203],
        # ["CI", "2007", "D", 2900, 4204],
        # ["CI", "2007", "D", 1450, 4205],
        # ["CI", "2007", "D", 1160, 4206],
        # ["CI", "2009", "D", 3500, 4207],
        # ["CI", "2009", "D", 1760, 4208],
        # ["CI", "2009", "D", 2900, 4209],
        # ["CI", "2009", "D", 1450, 4210],
        # ["CI", "2009", "D", 1160, 4211],
        # ["CI", "2506", "D", 3500, 4212],
        # ["CI", "2506", "D", 1760, 4214],
        # ["CI", "2506", "D", 2900, 4213],
        # ["CI", "2506", "D", 1450, 4215],
        # ["CI", "2507", "D", 3500, 4216],
        # ["CI", "2507", "D", 1760, 4218],
        # ["CI", "2507", "D", 2900, 4217],
        # ["CI", "2507", "D", 1450, 4219],
        # ["CI", "2507", "D", 1160, 4220],
        # ["CI", "2509", "D", 3500, 4221],
        # ["CI", "2509", "D", 1760, 4223],
        # ["CI", "2509", "D", 2900, 4222],
        # ["CI", "2509", "D", 1450, 4224],
        # ["CI", "2509", "D", 1160, 4225],
        # ["CI", "2511", "D", 1760, 4226],
        # ["CI", "2511", "D", 1450, 4227],
        # ["CI", "2511", "D", 1160, 4228],
        # ["CI", "2513", "D", 1760, 4229],
        # ["CI", "2513", "D", 1450, 4230],
        # ["CI", "2513", "D", 1160, 4231],
        # ["CI", "3007", "D", 3500, 4232],
        # ["CI", "3007", "D", 1760, 4234],
        # ["CI", "3007", "D", 2900, 4233],
        # ["CI", "3007", "D", 1450, 4235],
        # ["CI", "3007", "D", 1160, 4236],
        # ["CI", "3009", "D", 3500, 4237],
        # ["CI", "3009", "D", 1760, 4239],
        # ["CI", "3009", "D", 2900, 4238],
        # ["CI", "3009", "D", 1450, 4240],
        # ["CI", "3009", "D", 1160, 4241],
        # ["CI", "3011", "D", 1760, 4242],
        # ["CI", "3011", "D", 1450, 4243],
        # ["CI", "3011", "D", 1160, 4244],
        # ["CI", "3013", "D", 1760, 4245],
        # ["CI", "3013", "D", 1450, 4246],
        # ["CI", "3013", "D", 1160, 4247],
        # ["CI", "4007", "D", 3500, 4248],
        # ["CI", "4007", "D", 1760, 4250],
        # ["CI", "4007", "D", 2900, 4249],
        # ["CI", "4007", "D", 1450, 4251],
        # ["CI", "4007", "D", 1160, 4252],
        # ["CI", "4009", "D", 1760, 4253],
        # ["CI", "4009", "D", 1450, 4254],
        # ["CI", "4009", "D", 1160, 4255],
        # ["CI", "4013", "D", 1760, 4256],
        # ["CI", "4013", "D", 1450, 4257],
        # ["CI", "4013", "D", 1160, 4258],
        # ["CI", "5007", "D", 3500, 4259],
        # ["CI", "5007", "D", 1760, 4261],
        # ["CI", "5007", "D", 2900, 4260],
        # ["CI", "5007", "D", 1450, 4262],
        # ["CI", "5007", "D", 1160, 4263],
        # ["CI", "5009", "D", 1760, 4264],
        # ["CI", "5009", "D", 1450, 4265],
        # ["CI", "5009", "D", 1160, 4266],
        # ["CI", "5011", "D", 1760, 4267],
        # ["CI", "5011", "D", 1450, 4268],
        # ["CI", "5011", "D", 1160, 4269],
        # ["CI", "6009", "D", 1760, 4270],
        # ["CI", "6009", "D", 1450, 4271],
        # ["CI", "6009", "D", 1160, 4272],
        # ["CI", "6011", "D", 1760, 4273],
        # ["CI", "6011", "D", 1450, 4274],
        # ["CI", "6011", "D", 1160, 4275],
        # ["CI", "1209", "D", 3500, 4276],
        # ["CI", "1209", "D", 1760, 4278],
        # ["CI", "1209", "D", 2900, 4277],
        # ["CI", "1209", "D", 1450, 4279],
        # ["CI", "1209", "D", 1160, 4280],
        # ["CI", "1511", "D", 1760, 4281],
        # ["CI", "1511", "D", 1450, 4282],
        # ["CI", "1511", "D", 1160, 4283],
        # ["CI", "4011", "D", 1760, 4284],
        # ["CI", "4011", "D", 1450, 4285],
        # ["CI", "4011", "D", 1160, 4286],
        # ["CI", "2510", "D", 1760, 4287],
        # ["CI", "2510", "D", 1450, 4288],
        # ["CI", "2510", "D", 1160, 4289],
    ]
    for series, pumpmodel, design, speed, curve_number in pump_str:
        print(
            f"series:{series}; pumpmodel:{pumpmodel}; design:{design}; speed:{speed}; curvenumber:{curve_number}"
        )
        pumpObj = Pump.objects.filter(
            series=series,
            pump_model=pumpmodel,
            design_iteration=design,
            speed=speed,
        )
        print(pumpObj)
        pumpObj.update(
            curve_number=curve_number,
            curve_rev=f"PC-{curve_number} Rev -",
        )
    return HttpResponse(f"updated: \n{pump_str}", content_type="text/plain")
    # fi_pumps = Pump.objects.filter(series="CI")
    # for pump in fi_pumps:
    #     rev = pump.curve_rev
    #     print(f'model:{pump.pump_model}')
    #     print(f'rev:{rev}')
    #     if '-' in rev:
    #         deconstructed_rev = rev.split('-')
    #         new_rev = f'PC-{deconstructed_rev[1]} Rev A'
    #         pump.curve_rev = new_rev
    #         pump.save()


def populatePumps(request):
    pump_str = [
        ["HS", "060509","A", 1160,[9.7,9.0,8.5,8,7.5]],
        ["HS", "060509","A", 1450,[9.7,9.0,8.5,8,7.5]],
        ["HS", "060509","A", 1760,[9.7,9.0,8.5,8,7.5]],
        ["HS", "060511","A", 1160,[11.5, 10.625, 9.75, 8.875, 8]],
        ["HS", "060511","A", 1450,[11.5, 10.625, 9.75, 8.875, 8]],
        ["HS", "060511","A", 1760,[11.5, 10.625, 9.75, 8.875, 8]],
        ["HS", "060512","A", 1160,[12,11.25,10.5,9.75,9]],
        ["HS", "060512","A", 1450,[12,11.25,10.5,9.75,9]],
        ["HS", "060512","A", 1760,[12,11.25,10.5,9.75,9]],
        ["HS", "060515","A", 1160,[15,13.875,12.75,11.625,10.5]],
        ["HS", "060515","A", 1450,[15,13.875,12.75,11.625,10.5]],
        ["HS", "060515","A", 1760,[15,13.875,12.75,11.625,10.5]],
    ]
    for series, pumpmodel, design, speed, trims in pump_str:
        print(
            f"series:{series}; pumpmodel:{pumpmodel}; design:{design}; speed:{speed}; trims:{trims}"
        )

        try:
            pumpObj = Pump.objects.get(
                        series=series,
                        pump_model=pumpmodel,
                        design_iteration=design,
                        speed=speed,
                    )
            print("found")
            print(pumpObj)
        except ObjectDoesNotExist:
            pumpObj = Pump.objects.create(
                series=series,
                pump_model=pumpmodel,
                design_iteration=design,
                speed=speed,
            )
            print("created")
            print(pumpObj)
        for trim in trims:
            try:
                pumpTrimObj = PumpTrim.objects.get(
                    pump=pumpObj,
                    trim=trim
                )
                print("found")
                print(pumpTrimObj)
            except ObjectDoesNotExist:
                pumpTrimObj = PumpTrim.objects.create(
                    pump=pumpObj,
                    trim=trim
                )
                print("created")
                print(pumpTrimObj)

    return HttpResponse(f"updated: \n{pump_str}", content_type="text/plain")
    # fi_pumps = Pump.objects.filter(series="CI")
    # for pump in fi_pumps:
    #     rev = pump.curve_rev
    #     print(f'model:{pump.pump_model}')
    #     print(f'rev:{rev}')
    #     if '-' in rev:
    #         deconstructed_rev = rev.split('-')
    #         new_rev = f'PC-{deconstructed_rev[1]} Rev A'
    #         pump.curve_rev = new_rev
    #         pump.save()


def importOldDashboard(request):
    oldDataSources = list(OldTestDetails.objects.order_by().values_list('file_name', flat=True).distinct())
    # print(oldDataSources)
    for oldDataSource in oldDataSources:
        # if ".DBF" in oldDataSource:
        #     rawdata = RawTestsList.objects.filter(testname=oldDataSource[:-11])
        #     if rawdata.count():
        #         print(getattr(rawdata[0],'id'), getattr(rawdata[0], 'datareduced'))
        #         if not getattr(rawdata[0], 'datareduced'):
        #             pass
        if ".xlsx" in oldDataSource:
            excel_df = pd.read_excel(f'/home/atul_t/hydrodash/media/oldxlsx/{oldDataSource}')
            if 'Date' not in list(excel_df):
                print(f"No Date:{oldDataSource}")
            else:
                flow_title = ''
                head_title = ''
                temp_title = ''
                power_title = ''
                rpm_title = ''
                # Database to store values in SI Units with clear water at specific gravity 1.0
                # Flow - m3/hr
                # Head - m
                # Power - KW
                # Temperature - Kelvin

                flowunitconversionfactor = 0.227125
                headunitconversionfactor = 0.3048
                powerunitconversionfactor = 1

                columns_to_save = []

                if 'FM\\RPM' in list(excel_df) and 'FM\\POWER' in list(excel_df):
                    columns_to_save = ['Date', 'Time', 'FM\\FLOW', 'FM\\HEAD', 'FM\\SYST', 'FM\\POWER', 'FM\\RPM']
                    flow_title = 'FM\\FLOW'
                    head_title = 'FM\\HEAD'
                    temp_title = 'FM\\SYST'
                    power_title = 'FM\\POWER'
                    rpm_title = 'FM\\RPM'
                elif 'FM\\RPM' in list(excel_df) and 'FM\\HP' in list(excel_df):
                    columns_to_save = ['Date', 'Time', 'FM\\FLOW', 'FM\\HEAD', 'FM\\SYST', 'FM\\HP', 'FM\\RPM']
                    flow_title = 'FM\\FLOW'
                    head_title = 'FM\\HEAD'
                    temp_title = 'FM\\SYST'
                    power_title = 'FM\\HP'
                    rpm_title = 'FM\\RPM'
                    powerunitconversionfactor = .7457
                elif 'L4\\RPM' in list(excel_df) and 'FM\\HP' in list(excel_df):
                    columns_to_save = ['Date', 'Time', 'FM\\FLOW', 'FM\\HEAD', 'FM\\SYST', 'FM\\HP', 'L4\\RPM']
                    flow_title = 'FM\\FLOW'
                    head_title = 'FM\\HEAD'
                    temp_title = 'FM\\SYST'
                    power_title = 'FM\\HP'
                    rpm_title = 'L4\\RPM'
                    powerunitconversionfactor = .7457
                elif 'S2\\FLOW' in list(excel_df) and 'L4\\RPM' in list(excel_df):
                    columns_to_save = ['Date', 'Time', 'S2\\FLOW', 'S2\\HEAD', 'S2\\SYST', 'S2\\WATTS', 'L4\\RPM']
                    flow_title = 'S2\\FLOW'
                    head_title = 'S2\\HEAD'
                    temp_title = 'S2\\SYST'
                    power_title = 'S2\\WATTS'
                    rpm_title = 'L4\\RPM'
                    powerunitconversionfactor = 0.001
                elif 'S1\\FLOW' in list(excel_df):
                    columns_to_save = ['Date', 'Time', 'S1\\FLOW', 'S1\\HEAD', 'S1\\SYST', 'S1\\WATTS']
                    flow_title = 'S1\\FLOW'
                    head_title = 'S1\\HEAD'
                    temp_title = 'S1\\SYST'
                    power_title = 'S1\\WATTS'
                    powerunitconversionfactor = 0.001
                else:
                    print(f"No Match:{oldDataSource}")
                
                excel_df = excel_df[columns_to_save]

                oldDataObject = OldTestDetails.objects.filter(file_name=oldDataSource)[0]
                testname = getattr(oldDataObject, 'name')
                testeng = getattr(oldDataObject, 'testeng')
                teststnd = getattr(oldDataObject, 'teststnd')
                inpipedia_in = getattr(oldDataObject, 'inpipedia_in')
                outpipedia_in = getattr(oldDataObject, 'outpipedia_in')
                description = getattr(oldDataObject, 'description') + " __Auto_Imported"
                pump_type = getattr(oldDataObject, 'pump_type')
                testdate = str(excel_df['Date'].iloc[0])[:-9]+" "+excel_df['Time'].iloc[0]
                testdate = datetime.strptime(
                    testdate, "%Y-%m-%d %H:%M:%S.%f") + timedelta(hours=4)
                print(f'looking up: {testname}')
                if not ReducedPumpTestDetails.objects.filter(testname=testname).exists():
                    print(f'Inserting:\ntestname={testname},\ntesteng={testeng},\ntestloop={teststnd},\ndischarge_pipe_dia={outpipedia_in},\ninlet_pipe_dia={inpipedia_in},\ndescription={description},\ntestdate={testdate},\npumptype={pump_type},\nbearingframe=\'H\'')
                    testDetailsObj = ReducedPumpTestDetails.objects.create(
                        testname=testname,
                        testeng=testeng,
                        testloop=teststnd,
                        discharge_pipe_dia=outpipedia_in,
                        inlet_pipe_dia=inpipedia_in,
                        description=description,
                        testdate=testdate,
                        pumptype=pump_type,
                        bearingframe="H"
                    )
                    if rpm_title:
                        for index, row in excel_df.iterrows():
                            ReducedPumpTestData.objects.create(
                                testid = testDetailsObj,
                                flow = row[flow_title]*flowunitconversionfactor,
                                head = row[head_title]*headunitconversionfactor,
                                power = row[power_title]*powerunitconversionfactor,
                                temp = (row[temp_title]-32)*5/9,
                                rpm = row[rpm_title]
                            )
                    else:
                        for index, row in excel_df.iterrows():
                            ReducedPumpTestData.objects.create(
                                testid = testDetailsObj,
                                flow = row[flow_title]*flowunitconversionfactor,
                                head = row[head_title]*headunitconversionfactor,
                                power = row[power_title]*powerunitconversionfactor,
                                temp = (row[temp_title]-32)*5/9,
                                rpm = 0
                            )
                # print(oldDataSource)
                # break

    # if OldTestDetails.objects.filter(file_name=dbf_filename).count():
    #     oldtestdetailobj = OldTestDetails.objects.filter(file_name=dbf_filename).first()
    #     name = getattr(oldtestdetailobj, 'name')
    #     testeng = getattr(oldtestdetailobj, 'testeng')
    #     teststnd = getattr(oldtestdetailobj, 'teststnd')
    #     inpipedia_in = getattr(oldtestdetailobj, 'inpipedia_in')
    #     outpipedia_in = getattr(oldtestdetailobj, 'outpipedia_in')
    #     description = getattr(oldtestdetailobj, 'description')
    #     pump_type = getattr(oldtestdetailobj, 'pump_type')
    #     stand = "inside"
    return HttpResponse("DID IT")


def createResidentialCurves(request):
    def convert_ax_ft_to_m(ax_ft):
        """
        Update second axis according with first axis.
        """
        y1, y2 = ax_ft.get_ylim()
        ax_m.set_ylim(ft2m(y1), ft2m(y2))
        ax_kpa.set_ylim(ft2kpa(y1), ft2kpa(y2))
        x1, x2 = ax_ft.get_xlim()
        ax_l.set_xlim(gpm2lps(x1), gpm2lps(x2))
        # print("y1:"+str(y1)+" y2:"+str(y2)+" kpay1:"+str(ft2kpa(y1))+" kpay2:"+str(ft2kpa(y2)))

        ax_m.figure.canvas.draw()


    test_id = request.GET.get("testid", None)
    pump_name = request.GET.get("pumpname", None)

    # x_axis_limit_string = request.POST.get("xlim", None)
    # y_axis_limit_string = request.POST.get("ylim", None)

    circ_test_data = list(ReducedPumpTestData.objects.filter(testid__id=test_id).values('flow', 'head', 'power'))

    print(f'circ_test_data:{circ_test_data}')
    flow = []
    head = []
    power = []

    for data_point in circ_test_data:
        if data_point["flow"] < 0:
            flow.append(0)
        else:
            flow.append(data_point["flow"]*4.402862)
        head.append(data_point["head"]*3.28084)
        power.append(data_point["power"]*1.34102)
    
    print(f'flow:{flow}')
    print(f'head:{head}')
    # print(np.array(flow)*np.array(head))/(np.array(power)*3960)
    eff = np.divide(np.multiply(flow, head), np.array(power)*3960)*100
    head_poly = np.poly1d(np.polyfit(flow, head, 6))
    eff_poly = np.poly1d(np.polyfit(flow, eff, 4))

    print(f'efficiency:{eff}')
    

    # Lower it to move left. Use .1 if it doesnt interfere with other axis tags
    l_per_sec_offset = 0.04

    sp_gr_position = [max(flow) * 0.04, max(head) * 0.05]

    plot_flow = np.linspace(0, max(flow), 200)
    plot_head = head_poly(plot_flow)
    plot_eff = eff_poly(plot_flow)

    logo = plt.imread(
        get_sample_data(
            settings.BASE_DIR + staticfiles_storage.url("profiles/img/logo.png")
        )
    )

    plt.rc("font", family="Assistant")
    fig, (ax_ft, ax_eff) = plt.subplots(
        2, gridspec_kw={"height_ratios": [1, 1], "hspace": 0.35}
    )

    ax_m = ax_ft.twinx()
    ax_l = ax_m.twiny()
    ax_kpa = ax_l.twinx()
    fig.subplots_adjust(right=0.87, top=0.9, bottom=0.05)
    ax_kpa.spines["right"].set_position(("axes", 1.08))
    fig.set_size_inches(11, 17)

    ax_kpa.set_frame_on(True)
    ax_kpa.patch.set_visible(False)


    # automatically update ylim of ax2 when ylim of ax1 changes.
    ax_ft.callbacks.connect("ylim_changed", convert_ax_ft_to_m)
    ax_ft.callbacks.connect("xlim_changed", convert_ax_ft_to_m)

    ax_ft.plot(
        plot_flow,
        plot_head,
        color="k",
        linewidth=2.0,
    )
    ax_eff.plot(
        plot_flow,
        plot_eff,
        color="k",
        linewidth=2.0,
    )

    ax_ft.set_xlabel("FLOW IN GALLONS PER MINUTE", fontsize=15)
    ax_ft.set_ylabel("HEAD IN FEET", fontsize=15)
    ax_l.set_xlabel("L/SEC", fontsize=12)
    ax_l.xaxis.set_label_coords(l_per_sec_offset, 1.0175)
    ax_l.tick_params(direction="out", pad=0)
    ax_m.set_ylabel("HEAD IN METERS", fontsize=12)
    ax_kpa.set_ylabel("HEAD IN KILOPASCALS", fontsize=12)
    ax_ft.grid(b=True, which="major", color="k", linestyle="-", linewidth=0.75)
    ax_ft.grid(b=True, which="minor", color="#C0C0C0", linestyle="-", linewidth=0.75)
    ax_ft.minorticks_on()
    ax_ft.text(
        sp_gr_position[0],
        sp_gr_position[1],
        "CURVES BASED ON CLEAR WATER\nWITH SPECIFIC GRAVITY OF 1.0",
        fontsize=14,
        bbox=dict(facecolor="white", edgecolor="none", pad=0.0),
        ha="left",
        va="bottom",
    )

    
    ax_eff.set_xlabel("FLOW IN GALLONS PER MINUTE", fontsize=15)
    ax_eff.set_ylabel("EFFICIENCY IN PERCENTAGE", fontsize=15)
    ax_eff.grid(b=True, which="major", color="k", linestyle="-", linewidth=0.75)
    ax_eff.grid(b=True, which="minor", color="#C0C0C0", linestyle="-", linewidth=0.75)
    ax_eff.minorticks_on()


    for label in ax_ft.xaxis.get_majorticklabels():
        label.set_fontsize(14)
    for label in ax_ft.yaxis.get_majorticklabels():
        label.set_fontsize(14)
    for label in ax_l.xaxis.get_majorticklabels():
        label.set_fontsize(14)
    for label in ax_m.yaxis.get_majorticklabels():
        label.set_fontsize(14)
    for label in ax_kpa.yaxis.get_majorticklabels():
        label.set_fontsize(14)

    for label in ax_eff.xaxis.get_majorticklabels():
        label.set_fontsize(14)
    for label in ax_eff.yaxis.get_majorticklabels():
        label.set_fontsize(14)

    x1, x2 = ax_ft.get_xlim()
    ax_ft.set_xlim(0, x2)
    y1, y2 = ax_ft.get_ylim()
    ax_ft.set_ylim(0, y2)

    x1, x2 = ax_eff.get_xlim()
    ax_eff.set_xlim(0, x2)
    y1, y2 = ax_eff.get_ylim()
    ax_eff.set_ylim(0, y2)

    logoax = fig.add_axes([0.13, 0.92, 0.175, 0.175], anchor="SE", zorder=-1)
    logoax.imshow(logo)
    logoax.axis("off")

    logoax2 = fig.add_axes([0.13, 0.42, 0.175, 0.175], anchor="SE", zorder=-1)
    logoax2.imshow(logo)
    logoax2.axis("off")


    plt.gcf().text(
        0.4,
        0.935,
        f"Model: {pump_name}",
        fontsize=24,
        weight="bold",
    )
    plt.gcf().text(
        0.4,
        0.435,
        f"Model: {pump_name}",
        fontsize=24,
        weight="bold",
    )
    # plt.gcf().text(
    #     0.4,
    #     0.875,
    #     f'Curve No. xxxx',
    #     fontsize=14,
    #     weight="normal",
    # )




    ax_ft.plot(plot_flow, plot_head, "--", color="k", linewidth=0.5)

    # fig.patch.set_facecolor("xkcd:mint green")

    name = f"{pump_name}_head_eff"
    plt.savefig(
        settings.BASE_DIR + f"/media/Outputs/{name}.jpg", format="jpg", dpi=1000
    )
    plt.savefig(
        settings.BASE_DIR + f"/media/Outputs/{name}.pdf", format="pdf", dpi=1000
    )
    # print("Outputs\\" + name + ".jpg file created")

    # pdf_buffer = BytesIO()
    # random_string = randomString()
    # plt.savefig(pdf_buffer, format="pdf", dpi=1000, bbox_inches="tight")
    # pdf_buffer.seek(0)
    # pdf_buffer.close()
    # svg_buffer = BytesIO()
    # plt.savefig(svg_buffer, format="svg", dpi=1000, bbox_inches="tight")
    # svg_buffer.seek(0)
    # image_svg = svg_buffer.getvalue()
    # svg_buffer.close()

    # graphic = base64.b64encode(image_svg)
    # graphic = graphic.decode("utf-8")

    context = {
        "status": "success",
        # "plot": graphic,
    }

    return JsonResponse(context)


def my_legend(axis, diameter_label_flow_offset, plot_heads, diameter_label_head_offset):
    for index, line in enumerate(axis.lines):
        axis.text(
            diameter_label_flow_offset,
            np.amax(plot_heads[index]) + diameter_label_head_offset,
            line.get_label(),
            bbox=dict(facecolor="white", edgecolor="none", pad=0.0),
        )


def ft2m(head):
    return head * 0.3048


def ft2kpa(head):
    return head * 2.98898


def gpm2lps(flow):
    return flow * 0.06309


def round_of_eff(number):
    return round(number * 2) / 2


def round_pipe_dia(x):
    return 0.25 * round(x / 0.25)


def getVarSpeedIntelliquipData(request):
    pump_list = [
        # ["KV", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KV", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KV", "2006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KV", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KV", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KV", "3006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KV", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["KV", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KV", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KV", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KV", "4009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KV", "4011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KV", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KV", "6007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KV", "6009", "D", [1160, 1450, 1760], [7.0, 7.75, 8.5, 9.0, 9.5]],
        # ["KV", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "6013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KV", "8011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KV", "8013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KS", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KS", "2006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KS", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KS", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KS", "3006", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["KS", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["KS", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KS", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["KS", "4009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["KS", "4011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KS", "6007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["KS", "6009", "D", [1160, 1450, 1760], [7.0, 7.75, 8.5, 9.0, 9.5]],
        # ["KS", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "6013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["KS", "8011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["KS", "8013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "1206", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["FI", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["FI", "2506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["FI", "1207", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "2507", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["FI", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["FI", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["FI", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["FI", "1509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["FI", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["FI", "2509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["FI", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["FI", "4009", "D", [1160, 1450, 1760], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["FI", "5009", "D", [1160, 1450, 1760], [7.0, 7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["FI", "6009", "D", [1160, 1450, 1760], [7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["FI", "2511", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "5011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["FI", "2513", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "5013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["FI", "6013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        ["FI", "8013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "1206", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["CI", "1506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["CI", "2506", "D", [1450, 1760, 2900, 3500], [4.25, 4.75, 5.25, 5.75, 6.25]],
        # ["CI", "1207", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "1507", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "2007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "2507", "D", [1160, 1450, 1760, 2900, 3500], [5.5, 6.0, 6.5, 6.875, 7.25]],
        # ["CI", "3007", "D", [1160, 1450, 1760, 2900, 3500], [5.25, 5.75, 6.25, 6.75, 7.25]],
        # ["CI", "4007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["CI", "5007", "D", [1160, 1450, 1760, 2900, 3500], [5.75, 6.25, 6.75, 7.25]],
        # ["CI", "1509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["CI", "2009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25, 9.0, 9.5]],
        # ["CI", "2509", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["CI", "3009", "D", [1160, 1450, 1760, 2900, 3500], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["CI", "4009", "D", [1160, 1450, 1760], [6.75, 7.5, 8.25,  9.0, 9.5]],
        # ["CI", "5009", "D", [1160, 1450, 1760], [7.0, 7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["CI", "6009", "D", [1160, 1450, 1760], [7.5, 8.0, 8.5, 9.0, 9.5]],
        # ["CI", "2511", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "3011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "5011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "6011", "D", [1160, 1450, 1760], [8.0, 8.75, 9.5, 10.25, 11.0]],
        # ["CI", "2513", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "3013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "4013", "D", [1160, 1450, 1760], [9.5, 10.5, 11.5, 12.5, 13.5]],
        # ["CI", "1209","C", [1760,3500],[6.7,7.4,8.1,8.8,9.5]],
        # ["CI", "1511","B", [1760],[8.25,9,9.75,10.5,11.25]],
        # ["CI", "2510","C", [1760],[7,7.75,8.5,9.25,10]],
        # ["CI", "4011","C", [1760],[8,8.75,9.5,10.25,11]],
        # ["FI", "1209","C", [1760,3500],[6.7,7.4,8.1,8.8,9.5]],
        # ["FI", "1511","B", [1760],[8.25,9,9.75,10.5,11.25]],
        # ["FI", "2510","C", [1760],[7,7.75,8.5,9.25,10]],
        # ["FI", "4011","C", [1760],[8,8.75,9.5,10.25,11]],
        # ["KV", "1509","A", [1760,3500],[6.5,7.25,8,8.75,9.5]],
        # ["KV", "2011","A", [1760],[8.25,9,9.75,10.5,11.25]],
        # ["KS", "1509","A", [1760,3500],[6.5,7.25,8,8.75,9.5]],
        # ["KS", "2011","A", [1760],[8.25,9,9.75,10.5,11.25]],
        # ["KS", "8016","A", [1760],[11.5,12.75,14,15.25,16.5]],
        # ["KS", "1013","A", [1760],[9.5,10.375,11.25,12.125,13]],
        # ["KS", "1016","A", [1760],[11.5,12.625,13.75,14.875,16]],
        # ["KS", "1213","B", [1760],[9.5,10.375,11.25,12.125,13]],
        # ["KS", "1217","A", [1760],[13.5,14.5,15.5,16.5,17.3]],
    ]

    var_speed_trims = {
        "FI1206D_1800":[4.5, 5.25, 5.75, 6.25],
        "FI1207D_1800":[5.6, 6.3, 7.25],
        "FI1506D_1800":[4.3, 5.1, 5.5, 6.1, 6.25],
        "FI1507D_1800":[5.3, 6, 6.7, 7.25],
        "FI1509D_1800":[6.75, 7.5, 8.8, 9.5],
        "FI2007D_1800":[5.75, 6.25, 7.25],
        "FI2009D_1800":[7.3, 8.5, 9.5],
        "FI2506D_1800":[4.75, 5.2, 5.8, 6.25],
        "FI2507D_1800":[6.1, 7.25],
        "FI2509D_1800":[6.75, 7.9, 9, 9.5],
        "FI2511D_1800":[8.2, 9.3, 10.1, 11],
        "FI2513D_1800":[9.5, 10.8, 11.8, 13.1, 13.5],
        "FI3007D_1800":[6, 7.2, 7.25],
        "FI3009D_1800":[6.75, 7.7, 8.5, 9.5],
        "FI3011D_1800":[8.6, 9.9, 11],
        "FI3013D_1800":[10.1, 11, 11.8, 12.5, 13.5],
        "FI4007D_1800":[6.4, 7.25],
        "FI4009D_1800":[7, 7.8, 8.9, 9.5],
        "FI4013D_1800":[9.6, 10.4, 11.3, 12.4, 13.3, 13.5],
        "FI5007D_1800":[5.95, 6.7, 7.25],
        "FI5009D_1800":[7.3, 8.3, 9.2, 9.5],
        "FI5011D_1800":[8.2, 9.3, 10.1, 10.7, 11],
        "FI5013D_1800":[9.5, 10.1, 11, 11.9, 12.8, 13.5],
        "FI6009D_1800":[7.7, 8.4, 8.9, 9.5],
        "FI6011D_1800":[8.5, 9, 9.9, 10.6, 11],
        "FI6013D_1800":[9.7, 10.5, 11, 11.9, 12.9, 13.5],
        "FI8013D_1800":[9.8, 10.3, 10.9, 11.6, 12.5, 13.1, 13.5],
        "FI1206D_3600":[4.4, 5.1, 5.8, 6.25],
        "FI1207D_3600":[5.75, 6.2, 7.25],
        "FI1506D_3600":[4.8, 5.25, 6.1, 6.25],
        "FI1507D_3600":[5.25, 5.75, 6.6, 7.25],
        "FI1509D_3600":[6.8, 7.3, 7.8, 8.4, 9.1, 9.5],
        "FI2007D_3600":[5.5, 6.3, 7, 7.25],
        "FI2009D_3600":[7.1, 7.6, 8, 8.7, 9.4, 9.5],
        "FI2506D_3600":[4.7, 5.2, 5.7, 6.25],
        "FI2507D_3600":[5.9, 6.3, 6.8, 7.25],
        "FI2509D_3600":[7.3, 8.1, 8.7, 9.1, 9.5],
        "FI3007D_3600":[5.25, 5.75, 6.2, 6.6, 7.25],
        "FI3009D_3600":[6.9, 7.4, 7.8, 8.5, 9.4, 9.5],
        "FI4007D_3600":[5.8, 6.1, 6.6, 7.1, 7.25],
        "FI5007D_3600":[6.1, 6.5, 6.85, 7.25],
        "CI1206D_1800":[4.5, 5.25, 5.75, 6.25],
        "CI1207D_1800":[5.6, 6.3, 7.25],
        "CI1506D_1800":[4.3, 5.1, 5.5, 6.1, 6.25],
        "CI1507D_1800":[5.3, 6, 6.7, 7.25],
        "CI1509D_1800":[6.75, 7.5, 8.8, 9.5],
        "CI2007D_1800":[5.75, 6.25, 7.25],
        "CI2009D_1800":[7.3, 8.5, 9.5],
        "CI2506D_1800":[4.75, 5.2, 5.8, 6.25],
        "CI2507D_1800":[6.1, 7.25],
        "CI2509D_1800":[6.75, 7.9, 9, 9.5],
        "CI2511D_1800":[8.2, 9.3, 10.1, 11],
        "CI2513D_1800":[9.5, 10.8, 11.8, 13.1, 13.5],
        "CI3007D_1800":[6, 7.2, 7.25],
        "CI3009D_1800":[6.75, 7.7, 8.5, 9.5],
        "CI3011D_1800":[8.6, 9.9, 11],
        "CI3013D_1800":[10.1, 11, 11.8, 12.5, 13.5],
        "CI4007D_1800":[6.4, 7.25],
        "CI4009D_1800":[7, 7.8, 8.9, 9.5],
        "CI4013D_1800":[9.6, 10.4, 11.3, 12.4, 13.3, 13.5],
        "CI5007D_1800":[5.95, 6.7, 7.25],
        "CI5009D_1800":[7.3, 8.3, 9.2, 9.5],
        "CI5011D_1800":[8.2, 9.3, 10.1, 10.7, 11],
        "CI5013D_1800":[9.5, 10.1, 11, 11.9, 12.8, 13.5],
        "CI6009D_1800":[7.7, 8.4, 8.9, 9.5],
        "CI6011D_1800":[8.5, 9, 9.9, 10.6, 11],
        "CI6013D_1800":[9.7, 10.5, 11, 11.9, 12.9, 13.5],
        "CI8013D_1800":[9.8, 10.3, 10.9, 11.6, 12.5, 13.1],
        "CI1206D_3600":[4.4, 5.1, 5.8, 6.25],
        "CI1207D_3600":[5.75, 6.2, 7.25],
        "CI1506D_3600":[4.8, 5.25, 6.1, 6.25],
        "CI1507D_3600":[5.25, 5.75, 6.6, 7.25],
        "CI1509D_3600":[6.8, 7.3, 7.8, 8.4, 9.1, 9.5],
        "CI2007D_3600":[5.5, 6.3, 7, 7.25],
        "CI2009D_3600":[7.1, 7.6, 8, 8.7, 9.4, 9.5],
        "CI2506D_3600":[4.7, 5.2, 5.7, 6.25],
        "CI2507D_3600":[5.9, 6.3, 6.8, 7.25],
        "CI2509D_3600":[7.3, 8.1, 8.7, 9.1, 9.5],
        "CI3007D_3600":[5.25, 5.75, 6.2, 6.6, 7.25],
        "CI3009D_3600":[6.9, 7.4, 7.8, 8.5, 9.4, 9.5],
        "CI4007D_3600":[5.8, 6.1, 6.6, 7.1, 7.25],
        "CI5007D_3600":[6.1, 6.5, 6.85, 7.25],
        "KV1506D_1800":[5.75, 6.25],
        "KV1507D_1800":[5.6, 6.3, 7.25],
        "KV2006D_1800":[4.3, 5.1, 5.5, 6.1, 6.25],
        "KV2007D_1800":[5.3, 6, 6.7, 7.25],
        "KV2009D_1800":[6.75, 7.5, 8.8, 9.5],
        "KV3006D_1800":[4.75, 5.2, 5.8, 6.25],
        "KV3007D_1800":[6.1, 7.25],
        "KV3009D_1800":[6.75, 7.9, 9, 9.5],
        "KV3011D_1800":[8.2, 9.3, 10.1, 11],
        "KV3013D_1800":[9.5, 10.8, 11.8, 13.1, 13.5],
        "KV4007D_1800":[6, 7.2, 7.25],
        "KV4009D_1800":[6.75, 7.7, 8.5, 9.5],
        "KV4011D_1800":[8.6, 9.9, 11],
        "KV4013D_1800":[10.1, 11, 11.8, 12.5, 13.5],
        "KV5007D_1800":[6.4, 7.25],
        "KV6007D_1800":[6.1, 6.9, 7.25],
        "KV6009D_1800":[7.3, 8.3, 9.2, 9.5],
        "KV6011D_1800":[8.2, 9.3, 10.1, 10.7, 11],
        "KV6013D_1800":[9.5, 10.1, 11, 11.9, 12.8, 13.5],
        "KV8011D_1800":[8.5, 9, 9.9, 10.6, 11],
        "KV8013D_1800":[9.7, 10.5, 11, 11.9, 12.9, 13.5],
        "KV1506D_3600":[4.4, 5.1, 5.8, 6.25],
        "KV1507D_3600":[5.75, 6.2, 7.25],
        "KV2006D_3600":[4.8, 5.25, 6.1, 6.25],
        "KV2007D_3600":[5.25, 5.75, 6.6, 7.25],
        "KV2009D_3600":[6.8, 7.3, 7.8, 8.4, 9.1, 9.5],
        "KV3006D_3600":[4.7, 5.2, 5.7, 6.25],
        "KV3007D_3600":[5.9, 6.3, 6.8, 7.25],
        "KV3009D_3600":[7.3, 8.1, 8.7, 9.1, 9.5],
        "KV4007D_3600":[5.25, 5.75, 6.2, 6.6, 7.25],
        "KV4009D_3600":[6.9, 7.4, 7.8, 8.5, 9.4, 9.5],
        "KV5007D_3600":[5.8, 6.1, 6.6, 7.1, 7.25],
        "KV6007D_3600":[6.2, 6.7, 7, 7.25],
        "KS1506D_1800":[5.75, 6.25],
        "KS1507D_1800":[5.6, 6.3, 7.25],
        "KS2006D_1800":[4.3, 5.1, 5.5, 6.1, 6.25],
        "KS2007D_1800":[5.3, 6, 6.7, 7.25],
        "KS2009D_1800":[6.75, 7.5, 8.8, 9.5],
        "KS3006D_1800":[4.75, 5.2, 5.8, 6.25],
        "KS3007D_1800":[6.1, 7.25],
        "KS3009D_1800":[6.75, 7.9, 9, 9.5],
        "KS3011D_1800":[8.2, 9.3, 10.1, 11],
        "KS3013D_1800":[9.5, 10.8, 11.8, 13.1, 13.5],
        "KS4007D_1800":[6, 7.2, 7.25],
        "KS4009D_1800":[6.75, 7.7, 8.5, 9.5],
        "KS4011D_1800":[8.6, 9.9, 11],
        "KS4013D_1800":[10.1, 11, 11.8, 12.5, 13.5],
        "KS5007D_1800":[6.4, 7.25],
        "KS6007D_1800":[6.1, 6.9, 7.25],
        "KS6009D_1800":[7.3, 8.3, 9.2, 9.5],
        "KS6011D_1800":[8.2, 9.3, 10.1, 10.7, 11],
        "KS6013D_1800":[9.5, 10.1, 11, 11.9, 12.8, 13.5],
        "KS8011D_1800":[8.5, 9, 9.9, 10.6, 11],
        "KS8013D_1800":[9.7, 10.5, 11, 11.9, 12.9, 13.5],
        "KS1506D_3600":[4.4, 5.1, 5.8, 6.25],
        "KS1507D_3600":[5.75, 6.2, 7.25],
        "KS2006D_3600":[4.8, 5.25, 6.1, 6.25],
        "KS2007D_3600":[5.25, 5.75, 6.6, 7.25],
        "KS2009D_3600":[6.8, 7.3, 7.8, 8.4, 9.1, 9.5],
        "KS3006D_3600":[4.7, 5.2, 5.7, 6.25],
        "KS3007D_3600":[5.9, 6.3, 6.8, 7.25],
        "KS3009D_3600":[7.3, 8.1, 8.7, 9.1, 9.5],
        "KS4007D_3600":[5.25, 5.75, 6.2, 6.6, 7.25],
        "KS4009D_3600":[6.9, 7.4, 7.8, 8.5, 9.4, 9.5],
        "KS5007D_3600":[5.8, 6.1, 6.6, 7.1, 7.25],
        "KS6007D_3600":[6.2, 6.7, 7, 7.25],
        "CI1209C_1800":[7.2,7.6,8.6,9.5],
        "CI1209C_3600":[6.7,7.55,8.2,8.8,9.25,9.5],
        "CI1511B_1800":[8.75,10.15,11,11.25],
        "CI2510C_1800":[7.3,8.25,9.25,10],
        "CI4011C_1800":[8,8.9,9.6,10.3,11],
        "FI1209C_1800":[7.2,7.6,8.6,9.5],
        "FI1209C_3600":[6.7,7.55,8.2,8.8,9.25,9.5],
        "FI1511B_1800":[8.75,10.15,11,11.25],
        "FI2510C_1800":[7.3,8.25,9.25,10],
        "FI4011C_1800":[8,8.9,9.6,10.3,11],
        "KV1509A_1800":[6.7,7.75,9.5],
        "KV1509A_3600":[6.5,7.45,8.15,8.7,9.5],
        "KV2011A_1800":[9.35,10.45,11.25],
        "KS1509A_1800":[6.7,7.75,9.5],
        "KS1509A_3600":[6.5,7.45,8.15,8.7,9.5],
        "KS2011A_1800":[9.35,10.45,11.25],
        "KS8016A_1800":[11.95,12.95,14,14.7,15.75,16.5],
        "KS1013A_1800":[9.85,10.55,11.35,12.1,13],
        "KS1016A_1800":[11.8,12.6,14,15.4,16],
        "KS1213B_1800":[9.6,10.4,11.1,11.6,12.4,12.75,13],
        "KS1217A_1800":[14,14.7,15.5,16.05,16.7,17.3],
    }

    return_string = "Pump, Speed, Diameter, Flow, Head, Flow, Eta, NPSH Flow, NPSH"

    for series, model, d, speeds, trims in pump_list:
        for speed in speeds:
            if speed in [1760, 3500]:
                if speed == 1760:
                    nomspeed = 1800
                else:
                    nomspeed = 3600

                print(f"Looking up : {series}{model}{d} {speed}rpm")
                pumpobj = Pump.objects.get(
                    series=series, pump_model=model, design_iteration=d, speed=speed
                )

                npsh_data = NPSHData.objects.filter(pump=pumpobj).values("flow", "npsh")
                npsh_data = np.array(
                    [
                        [point["flow"] * 4.402862, point["npsh"] * 3.28084]
                        for point in npsh_data
                    ]
                )
                npsh_data = npsh_data[np.argsort(npsh_data[:, 0])]
                npsh_coeffs = list(np.polyfit(npsh_data.T[0], npsh_data.T[1], 3))
                npsh_poly = np.poly1d(np.polyfit(npsh_data.T[0], npsh_data.T[1], 3))
                npsh_coeffs.insert(0, 0)
                npsh_coeffs.insert(0, 0)
                
                sample_npsh_flows = np.linspace(np.amin(npsh_data.T[0]).item(), np.amax(npsh_data.T[0]).item(), 30)
                sample_npsh = npsh_poly(sample_npsh_flows)

                max_trim = max(trims)
               
                
                for trim in var_speed_trims[f"{series}{model}{d}_{nomspeed}"]:
                    print(f'Looking up : {trim}" trim')
                    low_trim = max(filter(lambda n:n<=trim, trims))
                    print(f'low_trim: {low_trim}')
                    high_trim = min(filter(lambda n:n>=trim, trims))
                    print(f'high_trim: {high_trim}')

                    pump_trim_obj_low_trim = PumpTrim.objects.get(
                        pump__series=series,
                        pump__pump_model=model,
                        pump__design_iteration=d,
                        pump__speed=speed,
                        trim=low_trim,
                    )
                    pump_trim_obj_high_trim = PumpTrim.objects.get(
                        pump__series=series,
                        pump__pump_model=model,
                        pump__design_iteration=d,
                        pump__speed=speed,
                        trim=high_trim,
                    )
                    head_poly_low_trim = np.poly1d(
                        getattr(pump_trim_obj_low_trim.marketing_data, "headcoeffs")
                    )
                    eff_poly_low_trim = np.poly1d(getattr(pump_trim_obj_low_trim.marketing_data, "effcoeffs"))
                    head_poly_high_trim = np.poly1d(
                        getattr(pump_trim_obj_high_trim.marketing_data, "headcoeffs")
                    )
                    eff_poly_high_trim = np.poly1d(getattr(pump_trim_obj_high_trim.marketing_data, "effcoeffs"))
                    flows_high_trim = list(
                        MarketingCurveData.objects.filter(
                            curveid=pump_trim_obj_high_trim.marketing_data
                        )
                        .order_by("flow")
                        .values_list("flow", flat=True)
                    )

                    # print(f'flows_high_trim: {flows_high_trim}')
                    
                    trim_flows = [0]
                    if high_trim > low_trim:
                        trim_heads = [math.pow(trim/low_trim,2)*head_poly_low_trim(0)*((high_trim-trim)/(high_trim-low_trim))+math.pow(trim/high_trim,2)*head_poly_high_trim(0)*((trim-low_trim)/(high_trim-low_trim))]
                    else:
                        trim_heads = [head_poly_low_trim(0)]
                    trim_effs = [0]

                    for high_trim_sample_flow in np.linspace(flows_high_trim[-1] * 4.402862/20, flows_high_trim[-1] * 4.402862, 19):
                        trim_quad_a = head_poly_high_trim(high_trim_sample_flow)/math.pow(high_trim_sample_flow,2)
                        roots_poly_high_trim = np.roots(np.polysub(head_poly_high_trim, np.poly1d([trim_quad_a, 0, 0])))
                        high_trim_flow = 0
                        for root in roots_poly_high_trim:
                            if np.isreal(root) and root >= 0 and root <= high_trim_sample_flow*1.05:
                                high_trim_flow = np.real(root)
                                break
                        roots_poly_low_trim = np.roots(np.polysub(head_poly_low_trim, np.poly1d([trim_quad_a, 0, 0])))
                        low_trim_flow = 0
                        for root in roots_poly_low_trim:
                            if np.isreal(root) and root >= 0 and root <= high_trim_sample_flow*1.05:
                                low_trim_flow = np.real(root)
                                break
                        
                        if high_trim > low_trim:
                            trim_flows.append(low_trim_flow+((trim-low_trim)/(high_trim-low_trim))*(high_trim_flow-low_trim_flow))
                            trim_effs.append((math.pow(trim/low_trim,2)*eff_poly_low_trim(low_trim_flow)*((high_trim-trim)/(high_trim-low_trim))+math.pow(trim/high_trim,2)*eff_poly_high_trim(high_trim_flow)*((trim-low_trim)/(high_trim-low_trim)))*100)
                            trim_heads.append(math.pow(trim/low_trim,2)*head_poly_low_trim(low_trim_flow)*((high_trim-trim)/(high_trim-low_trim))+math.pow(trim/high_trim,2)*head_poly_high_trim(high_trim_flow)*((trim-low_trim)/(high_trim-low_trim)))
                        else:
                            trim_flows.append(low_trim_flow)
                            trim_effs.append(eff_poly_low_trim(low_trim_flow)*100)
                            trim_heads.append(head_poly_low_trim(low_trim_flow))


                    for sflow, shead, seff, snflow, snpsh in zip(trim_flows, trim_heads, trim_effs, sample_npsh_flows, sample_npsh):
                        if trim == max_trim:
                            return_string += f"\n{series}{model}{d}, {speed}, {trim}, {sflow}, {shead}, {sflow}, {seff}, {snflow}, {snpsh}"
                        else:
                            return_string += f"\n{series}{model}{d}, {speed}, {trim}, {sflow}, {shead}, {sflow}, {seff}, , "

    response = HttpResponse(return_string, content_type='text/plain')
    response['Content-Disposition'] = 'attachment; filename={0}'.format("Intelliquip_export.csv")
    return response

def getDOEupload(request):
    # Manufacturer, Brand, Basic Model, model number, Equipment Category, Configuration, Full trim, 3, 1, Nominal Speed, , yes, Motor Efficiency,
    # Motor horsepower, yes, 100% BEP Flow, 75% BEP Flow, 110% BEP Flow, , , 100% BEP Head,  ,  , , , Driver Input Power @ 100% , Driver Input Power @ 75% ,
    # Driver Input Power @ 110%, , , Control power input at 25%, Control power input at 50%, Control power input at 75%, Control power input at 100%,
    # PEI, Head at 75%, Head at 110%, Head at 65%, Head at 90%, 109,
    
    test_id = request.GET.get("testid", None)
    
    pump_test_data = list(ReducedPumpTestData.objects.filter(testid__id=test_id).values('flow', 'head', 'power'))
    
    pump_test_data = list(ReducedPumpTestData.objects.filter(testid__id=test_id).values('flow', 'head', 'power', 'temp', 'rpm'))
    bep_flow_gpm = RawTestsList.objects.filter(id=test_id).values("bep_flow")[0]['bep_flow']*4.402862
    testname = RawTestsList.objects.filter(id=test_id).values("testname")[0]['testname']


    flows_gpm = []
    heads_ft = []
    powers_hp = []
    temperatures_k = []
    rpms = []

    water_props = IAPWS95(T=avgTemp, x=0)
    ref_water_props = IAPWS95(T=277.15, x=0)
    specific_gravity = water_props.rho/ref_water_props.rho

    for data_point in pump_test_data:
        if data_point["flow"] < 0:
            flows_gpm.append(0)
        else:
            flows_gpm.append(data_point["flow"]*4.402862)
        heads_ft.append(data_point["head"]*3.28084)
        powers_hp.append(data_point["power"]*1.34102)
        temperatures_k.append(data_point["temp"])
        rpms.append(data_point["rpm"])
    
    headpoly_ft = P.polyfit(flows_gpm, heads_ft, 6)
    powerpoly_hp = P.polyfit(flows_gpm, powers_hp, 6)
    bep_head_ft = P.polyval(bep_flow_gpm, headpoly_ft)
    bep_power_hp = P.polyval(bep_flow_gpm, powerpoly_hp)/specific_gravity
    flow_75_gpm = bep_flow_gpm*0.75
    flow_110_gpm = bep_flow_gpm*1.1
    head_75_ft = P.polyval(bep_flow_gpm*0.75, headpoly_ft)
    head_110_ft = P.polyval(bep_flow_gpm*1.1, headpoly_ft)
    power_75_hp = P.polyval(bep_flow_gpm*0.75, powerpoly_hp)/specific_gravity
    power_110_hp = P.polyval(bep_flow_gpm*1.1, powerpoly_hp)/specific_gravity
    power_120_hp = P.polyval(bep_flow_gpm*1.2, powerpoly_hp)/specific_gravity
    
    return_string_DOE = ""
    
    category = "RSV"
    nomspeed = 1800
    modelnumber = f"XXXXXXX"
    pei = calculatePEI(
        bep_flow_gpm/4.402862*nomspeed/rpms,
        bep_head_ft/3.28084*(nomspeed/rpms)**2,
        bep_power_hp/1.34102*(nomspeed/rpms)**3,
        flow_75_gpm/4.402862*nomspeed/rpms,
        head_75_ft/3.28084*(nomspeed/rpms)**2,
        power_75_hp/1.34102*(nomspeed/rpms)**3,
        flow_110_gpm/4.402862*nomspeed/rpms,
        head_110_ft/3.28084*(nomspeed/rpms)**2,
        power_110_hp/1.34102*(nomspeed/rpms)**3,
        power_120_hp/1.34102*(nomspeed/rpms)**3,
        nomspeed,
        category,
        "PM"
    )
    print(f"{pei:}")

    return_string_DOE += f"Taco,{series}{model},{category},1,{speed},{bep_flow_gpm},{bep_head_ft},{bep_eff},{bep_power_hp},{flow_75_gpm},{eff_75},{power_75_hp},{flow_110_gpm},{eff_110},{power_110_hp}\n"
    return_string_DOE += f"Taco,{series}{model}{design_iteration},{category},1,{speed},{pei['PEIcl_EL2']},{pei['PEIcl_EL3']},{pei['PEIcl_EL4']},{pei['PEIcl_EL5']}\n"
    return_string_DOE += f"Taco,{modelnumber},{category},{hi_category},1,N/A,{nomspeed},,,,,{bep_flow_gpm},{bep_head_ft},{bep_eff},{bep_power_hp},{flow_75_gpm},{head_75_ft},{eff_75},{power_75_hp},{flow_110_gpm},{head_75_ft},{eff_110},{power_110_hp}\n"

    return HttpResponse(return_string_DOE, content_type="text/plain")
